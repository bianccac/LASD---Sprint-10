
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001f60  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  0080013e  0080013e  00002032  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e61  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  00003009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113f  00000000  00000000  000038c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008aca  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000968  00000000  00000000  0000d91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000e282  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003029  00000000  00000000  0000e33a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_2>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_4>
      14:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e0 e6       	ldi	r30, 0x60	; 96
     25c:	ff e1       	ldi	r31, 0x1F	; 31
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ae 33       	cpi	r26, 0x3E	; 62
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ae e3       	ldi	r26, 0x3E	; 62
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	aa 34       	cpi	r26, 0x4A	; 74
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 4a 07 	call	0xe94	; 0xe94 <main>
     27e:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
uint8_t verde = 1, vermelho = 1, amarelo = 1;
uint16_t sel;
uint32_t tempo_ms = 0;
// Botões para decremento e incremento do display e para indicar o tempo do sinal
ISR(INT0_vect)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62

	switch(cont) //Para indicar em qual sinal está tendo aquela variação no tempo
     2b2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	82 30       	cpi	r24, 0x02	; 2
     2bc:	91 05       	cpc	r25, r1
     2be:	71 f1       	breq	.+92     	; 0x31c <__vector_1+0x96>
     2c0:	83 30       	cpi	r24, 0x03	; 3
     2c2:	91 05       	cpc	r25, r1
     2c4:	2c f4       	brge	.+10     	; 0x2d0 <__vector_1+0x4a>
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	49 f0       	breq	.+18     	; 0x2dc <__vector_1+0x56>
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	b9 f0       	breq	.+46     	; 0x2fc <__vector_1+0x76>
     2ce:	52 c0       	rjmp	.+164    	; 0x374 <__vector_1+0xee>
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	91 05       	cpc	r25, r1
     2d4:	81 f1       	breq	.+96     	; 0x336 <__vector_1+0xb0>
     2d6:	04 97       	sbiw	r24, 0x04	; 4
     2d8:	d9 f1       	breq	.+118    	; 0x350 <__vector_1+0xca>
     2da:	4c c0       	rjmp	.+152    	; 0x374 <__vector_1+0xee>
	{
	case 0:
		if (aux == 0)
     2dc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     2e0:	88 23       	and	r24, r24
     2e2:	31 f4       	brne	.+12     	; 0x2f0 <__vector_1+0x6a>
		{
			aux++;
     2e4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux>
		}
		else
		{
			aux--;
		}
		break;
     2ee:	42 c0       	rjmp	.+132    	; 0x374 <__vector_1+0xee>
		{
			aux++;
		}
		else
		{
			aux--;
     2f0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux>
		}
		break;
     2fa:	3c c0       	rjmp	.+120    	; 0x374 <__vector_1+0xee>
	case 1:
		if (tempo == 0)
     2fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     300:	88 23       	and	r24, r24
     302:	31 f4       	brne	.+12     	; 0x310 <__vector_1+0x8a>
		{
			tempo++;
     304:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tempo>
		}
		else
		{
			tempo--;
		}
		break;
     30e:	32 c0       	rjmp	.+100    	; 0x374 <__vector_1+0xee>
		{
			tempo++;
		}
		else
		{
			tempo--;
     310:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     314:	81 50       	subi	r24, 0x01	; 1
     316:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tempo>
		}
		break;
     31a:	2c c0       	rjmp	.+88     	; 0x374 <__vector_1+0xee>
	case 2:
		verde++;
     31c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (verde == 10) // Caso o número seja maior que 9, atribui que o seu valor é o inicial
     326:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     32a:	8a 30       	cpi	r24, 0x0A	; 10
     32c:	f1 f4       	brne	.+60     	; 0x36a <__vector_1+0xe4>
		{
			verde = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
     334:	1a c0       	rjmp	.+52     	; 0x36a <__vector_1+0xe4>
	case 3:
		amarelo++;
     336:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <amarelo>
		if (amarelo == 10)
     340:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     344:	8a 30       	cpi	r24, 0x0A	; 10
     346:	99 f4       	brne	.+38     	; 0x36e <__vector_1+0xe8>
		{
			amarelo = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <amarelo>
		}
		break;
     34e:	0f c0       	rjmp	.+30     	; 0x36e <__vector_1+0xe8>
	case 4:
		vermelho++;
     350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vermelho>
		if (vermelho == 10)
     35a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     35e:	8a 30       	cpi	r24, 0x0A	; 10
     360:	41 f4       	brne	.+16     	; 0x372 <__vector_1+0xec>
		{
			vermelho = 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vermelho>
		}
		break;
     368:	04 c0       	rjmp	.+8      	; 0x372 <__vector_1+0xec>
		verde++;
		if (verde == 10) // Caso o número seja maior que 9, atribui que o seu valor é o inicial
		{
			verde = 1;
		}
		break;
     36a:	00 00       	nop
     36c:	03 c0       	rjmp	.+6      	; 0x374 <__vector_1+0xee>
		amarelo++;
		if (amarelo == 10)
		{
			amarelo = 1;
		}
		break;
     36e:	00 00       	nop
     370:	01 c0       	rjmp	.+2      	; 0x374 <__vector_1+0xee>
		vermelho++;
		if (vermelho == 10)
		{
			vermelho = 1;
		}
		break;
     372:	00 00       	nop
	}
	display();
     374:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <display>

}
     378:	00 00       	nop
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	ff 91       	pop	r31
     380:	ef 91       	pop	r30
     382:	bf 91       	pop	r27
     384:	af 91       	pop	r26
     386:	9f 91       	pop	r25
     388:	8f 91       	pop	r24
     38a:	7f 91       	pop	r23
     38c:	6f 91       	pop	r22
     38e:	5f 91       	pop	r21
     390:	4f 91       	pop	r20
     392:	3f 91       	pop	r19
     394:	2f 91       	pop	r18
     396:	0f 90       	pop	r0
     398:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <__vector_2>:

ISR(INT1_vect)
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	3f 93       	push	r19
     3b2:	4f 93       	push	r20
     3b4:	5f 93       	push	r21
     3b6:	6f 93       	push	r22
     3b8:	7f 93       	push	r23
     3ba:	8f 93       	push	r24
     3bc:	9f 93       	push	r25
     3be:	af 93       	push	r26
     3c0:	bf 93       	push	r27
     3c2:	ef 93       	push	r30
     3c4:	ff 93       	push	r31
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62

	switch(cont)
     3ce:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     3d2:	88 2f       	mov	r24, r24
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	91 05       	cpc	r25, r1
     3da:	71 f1       	breq	.+92     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3dc:	83 30       	cpi	r24, 0x03	; 3
     3de:	91 05       	cpc	r25, r1
     3e0:	2c f4       	brge	.+10     	; 0x3ec <__vector_2+0x4a>
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	49 f0       	breq	.+18     	; 0x3f8 <__vector_2+0x56>
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	b9 f0       	breq	.+46     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3ea:	52 c0       	rjmp	.+164    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     3ec:	83 30       	cpi	r24, 0x03	; 3
     3ee:	91 05       	cpc	r25, r1
     3f0:	81 f1       	breq	.+96     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     3f2:	04 97       	sbiw	r24, 0x04	; 4
     3f4:	d9 f1       	breq	.+118    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     3f6:	4c c0       	rjmp	.+152    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	{
	case 0:
		if (aux == 1)
     3f8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	31 f4       	brne	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			aux--;
     400:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     404:	81 50       	subi	r24, 0x01	; 1
     406:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux>
		}
		else
		{
			aux++;
		}
		break;
     40a:	42 c0       	rjmp	.+132    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{
			aux--;
		}
		else
		{
			aux++;
     40c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     410:	8f 5f       	subi	r24, 0xFF	; 255
     412:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <aux>
		}
		break;
     416:	3c c0       	rjmp	.+120    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	case 1:
		if (tempo == 1)
     418:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	31 f4       	brne	.+12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			tempo--;
     420:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     424:	81 50       	subi	r24, 0x01	; 1
     426:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tempo>
		}
		else
		{
			tempo++;
		}
		break;
     42a:	32 c0       	rjmp	.+100    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{
			tempo--;
		}
		else
		{
			tempo++;
     42c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tempo>
		}
		break;
     436:	2c c0       	rjmp	.+88     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	case 2:
		verde--;
     438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if (verde == 0) // Caso o número seja menor que 0, atribui que o seu valor é o inicial
     442:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     446:	88 23       	and	r24, r24
     448:	f1 f4       	brne	.+60     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			verde = 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		break;
     450:	1a c0       	rjmp	.+52     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	case 3:
		amarelo--;
     452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     456:	81 50       	subi	r24, 0x01	; 1
     458:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <amarelo>
		if (amarelo == 0)
     45c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     460:	88 23       	and	r24, r24
     462:	99 f4       	brne	.+38     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		{
			amarelo = 1;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <amarelo>
		}
		break;
     46a:	0f c0       	rjmp	.+30     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	case 4:
		vermelho--;
     46c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     470:	81 50       	subi	r24, 0x01	; 1
     472:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vermelho>
		if (vermelho == 0)
     476:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     47a:	88 23       	and	r24, r24
     47c:	41 f4       	brne	.+16     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			vermelho = 1;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vermelho>
		}
		break;
     484:	04 c0       	rjmp	.+8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		verde--;
		if (verde == 0) // Caso o número seja menor que 0, atribui que o seu valor é o inicial
		{
			verde = 1;
		}
		break;
     486:	00 00       	nop
     488:	03 c0       	rjmp	.+6      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		amarelo--;
		if (amarelo == 0)
		{
			amarelo = 1;
		}
		break;
     48a:	00 00       	nop
     48c:	01 c0       	rjmp	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		vermelho--;
		if (vermelho == 0)
		{
			vermelho = 1;
		}
		break;
     48e:	00 00       	nop
	}
	display();
     490:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <display>
}
     494:	00 00       	nop
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_5>:

ISR(PCINT2_vect) //Botão de seleção do sinal
{
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62

	if (!(PIND & (1 << 4))) //
     4ea:	89 e2       	ldi	r24, 0x29	; 41
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	80 71       	andi	r24, 0x10	; 16
     4f8:	99 27       	eor	r25, r25
     4fa:	89 2b       	or	r24, r25
     4fc:	59 f4       	brne	.+22     	; 0x514 <__vector_5+0x56>
	{
		cont++;
     4fe:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
		if (cont == 5) //Para determinar que só existem esses casos
     508:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     50c:	85 30       	cpi	r24, 0x05	; 5
     50e:	11 f4       	brne	.+4      	; 0x514 <__vector_5+0x56>
		{
			cont = 0;
     510:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		}
	}
	display();
     514:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <display>

	if (!(PIND & (1 << 1))) //
     518:	89 e2       	ldi	r24, 0x29	; 41
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	fc 01       	movw	r30, r24
     51e:	80 81       	ld	r24, Z
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	82 70       	andi	r24, 0x02	; 2
     526:	99 27       	eor	r25, r25
     528:	89 2b       	or	r24, r25
     52a:	29 f4       	brne	.+10     	; 0x536 <__vector_5+0x78>
	{
		aux3++;
     52c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <aux3>
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <aux3>
	}

}
     536:	00 00       	nop
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	7f 91       	pop	r23
     54a:	6f 91       	pop	r22
     54c:	5f 91       	pop	r21
     54e:	4f 91       	pop	r20
     550:	3f 91       	pop	r19
     552:	2f 91       	pop	r18
     554:	0f 90       	pop	r0
     556:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_4>:
ISR (PCINT1_vect)
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62

	if (!(PINC & (1 << 6))) //
     58c:	86 e2       	ldi	r24, 0x26	; 38
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	80 74       	andi	r24, 0x40	; 64
     59a:	99 27       	eor	r25, r25
     59c:	89 2b       	or	r24, r25
     59e:	c1 f4       	brne	.+48     	; 0x5d0 <__vector_4+0x70>
	{
		aux2++;
     5a0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <aux2>
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <aux2>
		if (flag4 == 1)
     5aa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <flag4>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	79 f4       	brne	.+30     	; 0x5d0 <__vector_4+0x70>
		{

			carmin = aux2 * 12;
     5b2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <aux2>
     5b6:	89 2f       	mov	r24, r25
     5b8:	88 0f       	add	r24, r24
     5ba:	89 0f       	add	r24, r25
     5bc:	88 0f       	add	r24, r24
     5be:	88 0f       	add	r24, r24
     5c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <carmin>
			aux2 = 0;
     5c4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <aux2>
			flag4 = 0;
     5c8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <flag4>
			display();
     5cc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <display>
		}
	}

}
     5d0:	00 00       	nop
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	ff 91       	pop	r31
     5d8:	ef 91       	pop	r30
     5da:	bf 91       	pop	r27
     5dc:	af 91       	pop	r26
     5de:	9f 91       	pop	r25
     5e0:	8f 91       	pop	r24
     5e2:	7f 91       	pop	r23
     5e4:	6f 91       	pop	r22
     5e6:	5f 91       	pop	r21
     5e8:	4f 91       	pop	r20
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	0f 90       	pop	r0
     5f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_14>:
ISR(TIMER0_COMPA_vect)// Interrupção do TC0 a cada 1ms
{
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	2f 93       	push	r18
     608:	3f 93       	push	r19
     60a:	4f 93       	push	r20
     60c:	5f 93       	push	r21
     60e:	6f 93       	push	r22
     610:	7f 93       	push	r23
     612:	8f 93       	push	r24
     614:	9f 93       	push	r25
     616:	af 93       	push	r26
     618:	bf 93       	push	r27
     61a:	ef 93       	push	r30
     61c:	ff 93       	push	r31
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	tempo_ms++;
     626:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     62a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     62e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     632:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	a1 1d       	adc	r26, r1
     63a:	b1 1d       	adc	r27, r1
     63c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tempo_ms>
     640:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <tempo_ms+0x1>
     644:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <tempo_ms+0x2>
     648:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <tempo_ms+0x3>

	if (aux == 1)
     64c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	69 f5       	brne	.+90     	; 0x6ae <__vector_14+0xb4>
	{

		if ((tempo_ms % 5000) == 0)
     654:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     658:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     65c:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     660:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     664:	28 e8       	ldi	r18, 0x88	; 136
     666:	33 e1       	ldi	r19, 0x13	; 19
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	bc 01       	movw	r22, r24
     66e:	cd 01       	movw	r24, r26
     670:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	89 2b       	or	r24, r25
     67a:	8a 2b       	or	r24, r26
     67c:	8b 2b       	or	r24, r27
     67e:	19 f4       	brne	.+6      	; 0x686 <__vector_14+0x8c>
		{
			flag4 = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <flag4>

		}
		verde = ((carmin / 60) + 1);
     686:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <carmin>
     68a:	89 e8       	ldi	r24, 0x89	; 137
     68c:	98 9f       	mul	r25, r24
     68e:	81 2d       	mov	r24, r1
     690:	11 24       	eor	r1, r1
     692:	82 95       	swap	r24
     694:	86 95       	lsr	r24
     696:	87 70       	andi	r24, 0x07	; 7
     698:	8f 5f       	subi	r24, 0xFF	; 255
     69a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		vermelho = 10 - verde;
     69e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6a2:	9a e0       	ldi	r25, 0x0A	; 10
     6a4:	29 2f       	mov	r18, r25
     6a6:	28 1b       	sub	r18, r24
     6a8:	82 2f       	mov	r24, r18
     6aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <vermelho>

	}
	if ((tempo_ms % 500) == 0)
     6ae:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     6b2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     6b6:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     6ba:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     6be:	24 ef       	ldi	r18, 0xF4	; 244
     6c0:	31 e0       	ldi	r19, 0x01	; 1
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	bc 01       	movw	r22, r24
     6c8:	cd 01       	movw	r24, r26
     6ca:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     6ce:	dc 01       	movw	r26, r24
     6d0:	cb 01       	movw	r24, r22
     6d2:	89 2b       	or	r24, r25
     6d4:	8a 2b       	or	r24, r26
     6d6:	8b 2b       	or	r24, r27
     6d8:	99 f5       	brne	.+102    	; 0x740 <__vector_14+0x146>
	{
		flag5 = 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <flag5>
		if ((PIND & 0b01000000) == 0b00000000)//
     6e0:	89 e2       	ldi	r24, 0x29	; 41
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 81       	ld	r24, Z
     6e8:	88 2f       	mov	r24, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	80 74       	andi	r24, 0x40	; 64
     6ee:	99 27       	eor	r25, r25
     6f0:	89 2b       	or	r24, r25
     6f2:	19 f4       	brne	.+6      	; 0x6fa <__vector_14+0x100>
		{
			pessoa = 1;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pessoa>
		}
		if ((1023000 / ADC - 1000) < 300) // Caso possua intensidade menor que 300 Lux
     6fa:	88 e7       	ldi	r24, 0x78	; 120
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	9c 01       	movw	r18, r24
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	88 e1       	ldi	r24, 0x18	; 24
     70c:	9c e9       	ldi	r25, 0x9C	; 156
     70e:	af e0       	ldi	r26, 0x0F	; 15
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	bc 01       	movw	r22, r24
     714:	cd 01       	movw	r24, r26
     716:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divmodsi4>
     71a:	da 01       	movw	r26, r20
     71c:	c9 01       	movw	r24, r18
     71e:	88 5e       	subi	r24, 0xE8	; 232
     720:	93 40       	sbci	r25, 0x03	; 3
     722:	a1 09       	sbc	r26, r1
     724:	b1 09       	sbc	r27, r1
     726:	8c 32       	cpi	r24, 0x2C	; 44
     728:	91 40       	sbci	r25, 0x01	; 1
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	24 f4       	brge	.+8      	; 0x738 <__vector_14+0x13e>
		{
			luz = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <luz>
     736:	04 c0       	rjmp	.+8      	; 0x740 <__vector_14+0x146>
		}
		else
		{
			OCR0B = 0;
     738:	88 e4       	ldi	r24, 0x48	; 72
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	10 82       	st	Z, r1
		}
	}
	if (tempo == 1)
     740:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	09 f0       	breq	.+2      	; 0x74a <__vector_14+0x150>
     748:	91 c0       	rjmp	.+290    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
	{

		if (cont2 < 4) // De 0 a 3 para representar o sinal verde
     74a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     74e:	84 30       	cpi	r24, 0x04	; 4
     750:	68 f5       	brcc	.+90     	; 0x7ac <__vector_14+0x1b2>
		{
			if ((tempo_ms % (verde * 330)) == 0)
     752:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     756:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     75a:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     75e:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     762:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     766:	62 2f       	mov	r22, r18
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	4a e4       	ldi	r20, 0x4A	; 74
     76c:	51 e0       	ldi	r21, 0x01	; 1
     76e:	64 9f       	mul	r22, r20
     770:	90 01       	movw	r18, r0
     772:	65 9f       	mul	r22, r21
     774:	30 0d       	add	r19, r0
     776:	74 9f       	mul	r23, r20
     778:	30 0d       	add	r19, r0
     77a:	11 24       	eor	r1, r1
     77c:	03 2e       	mov	r0, r19
     77e:	00 0c       	add	r0, r0
     780:	44 0b       	sbc	r20, r20
     782:	55 0b       	sbc	r21, r21
     784:	bc 01       	movw	r22, r24
     786:	cd 01       	movw	r24, r26
     788:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	89 2b       	or	r24, r25
     792:	8a 2b       	or	r24, r26
     794:	8b 2b       	or	r24, r27
     796:	09 f0       	breq	.+2      	; 0x79a <__vector_14+0x1a0>
     798:	f3 c0       	rjmp	.+486    	; 0x980 <__stack+0x81>
			{
				cont2++;
     79a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag1 = 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <flag1>
     7aa:	ea c0       	rjmp	.+468    	; 0x980 <__stack+0x81>
			}
		}
		else if (cont2 == 4)  // Quando o contador for igual a 4, representa o sinal amarelo
     7ac:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     7b0:	84 30       	cpi	r24, 0x04	; 4
     7b2:	69 f5       	brne	.+90     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		{
			if ((tempo_ms % ((amarelo) * 1000)) == 0)
     7b4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     7b8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     7bc:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     7c0:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     7c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <amarelo>
     7c8:	62 2f       	mov	r22, r18
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	48 ee       	ldi	r20, 0xE8	; 232
     7ce:	53 e0       	ldi	r21, 0x03	; 3
     7d0:	64 9f       	mul	r22, r20
     7d2:	90 01       	movw	r18, r0
     7d4:	65 9f       	mul	r22, r21
     7d6:	30 0d       	add	r19, r0
     7d8:	74 9f       	mul	r23, r20
     7da:	30 0d       	add	r19, r0
     7dc:	11 24       	eor	r1, r1
     7de:	03 2e       	mov	r0, r19
     7e0:	00 0c       	add	r0, r0
     7e2:	44 0b       	sbc	r20, r20
     7e4:	55 0b       	sbc	r21, r21
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	89 2b       	or	r24, r25
     7f4:	8a 2b       	or	r24, r26
     7f6:	8b 2b       	or	r24, r27
     7f8:	09 f0       	breq	.+2      	; 0x7fc <__vector_14+0x202>
     7fa:	c2 c0       	rjmp	.+388    	; 0x980 <__stack+0x81>
			{
				cont2++;
     7fc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag2 = 1;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag2>
     80c:	b9 c0       	rjmp	.+370    	; 0x980 <__stack+0x81>
			}
		}
		else if (cont2 > 4)  // Quando o contador for maior que 4, representa o sinal vermelho
     80e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     812:	85 30       	cpi	r24, 0x05	; 5
     814:	08 f4       	brcc	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	b4 c0       	rjmp	.+360    	; 0x980 <__stack+0x81>
		{
			if ((tempo_ms % (vermelho * 165)) == 0)
     818:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     81c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     820:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     824:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     828:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <vermelho>
     82c:	42 2f       	mov	r20, r18
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	65 ea       	ldi	r22, 0xA5	; 165
     832:	64 9f       	mul	r22, r20
     834:	90 01       	movw	r18, r0
     836:	65 9f       	mul	r22, r21
     838:	30 0d       	add	r19, r0
     83a:	11 24       	eor	r1, r1
     83c:	03 2e       	mov	r0, r19
     83e:	00 0c       	add	r0, r0
     840:	44 0b       	sbc	r20, r20
     842:	55 0b       	sbc	r21, r21
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	89 2b       	or	r24, r25
     852:	8a 2b       	or	r24, r26
     854:	8b 2b       	or	r24, r27
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	93 c0       	rjmp	.+294    	; 0x980 <__stack+0x81>
			{
				cont2++;
     85a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag3 = 1;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag3>
     86a:	8a c0       	rjmp	.+276    	; 0x980 <__stack+0x81>
	}
	else
	{


		if (cont2 < 4) // De 0 a 3 para representar o sinal verde
     86c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     870:	84 30       	cpi	r24, 0x04	; 4
     872:	50 f5       	brcc	.+84     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
		{
			if ((tempo_ms % (verde * 250)) == 0)
     874:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     878:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     87c:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     880:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     884:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     888:	42 2f       	mov	r20, r18
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	6a ef       	ldi	r22, 0xFA	; 250
     88e:	64 9f       	mul	r22, r20
     890:	90 01       	movw	r18, r0
     892:	65 9f       	mul	r22, r21
     894:	30 0d       	add	r19, r0
     896:	11 24       	eor	r1, r1
     898:	03 2e       	mov	r0, r19
     89a:	00 0c       	add	r0, r0
     89c:	44 0b       	sbc	r20, r20
     89e:	55 0b       	sbc	r21, r21
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	89 2b       	or	r24, r25
     8ae:	8a 2b       	or	r24, r26
     8b0:	8b 2b       	or	r24, r27
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     8b4:	65 c0       	rjmp	.+202    	; 0x980 <__stack+0x81>
			{
				cont2++;
     8b6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag1 = 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <flag1>
     8c6:	5c c0       	rjmp	.+184    	; 0x980 <__stack+0x81>
			}
		}
		else if (cont2 == 4)  // Quando o contador for igual a 4, representa o sinal amarelo
     8c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     8cc:	84 30       	cpi	r24, 0x04	; 4
     8ce:	61 f5       	brne	.+88     	; 0x928 <__stack+0x29>
		{
			if ((tempo_ms % ((amarelo) * 1000)) == 0)
     8d0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     8d4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     8d8:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     8dc:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     8e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <amarelo>
     8e4:	62 2f       	mov	r22, r18
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	48 ee       	ldi	r20, 0xE8	; 232
     8ea:	53 e0       	ldi	r21, 0x03	; 3
     8ec:	64 9f       	mul	r22, r20
     8ee:	90 01       	movw	r18, r0
     8f0:	65 9f       	mul	r22, r21
     8f2:	30 0d       	add	r19, r0
     8f4:	74 9f       	mul	r23, r20
     8f6:	30 0d       	add	r19, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	03 2e       	mov	r0, r19
     8fc:	00 0c       	add	r0, r0
     8fe:	44 0b       	sbc	r20, r20
     900:	55 0b       	sbc	r21, r21
     902:	bc 01       	movw	r22, r24
     904:	cd 01       	movw	r24, r26
     906:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	89 2b       	or	r24, r25
     910:	8a 2b       	or	r24, r26
     912:	8b 2b       	or	r24, r27
     914:	a9 f5       	brne	.+106    	; 0x980 <__stack+0x81>
			{
				cont2++;
     916:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag2 = 1;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <flag2>
     926:	2c c0       	rjmp	.+88     	; 0x980 <__stack+0x81>
			}
		}
		else if (cont2 > 4)  // Quando o contador for maior que 4, representa o sinal vermelho
     928:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     92c:	85 30       	cpi	r24, 0x05	; 5
     92e:	40 f1       	brcs	.+80     	; 0x980 <__stack+0x81>
		{
			if ((tempo_ms % (vermelho * 250)) == 0)
     930:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tempo_ms>
     934:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tempo_ms+0x1>
     938:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <tempo_ms+0x2>
     93c:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <tempo_ms+0x3>
     940:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <vermelho>
     944:	42 2f       	mov	r20, r18
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	6a ef       	ldi	r22, 0xFA	; 250
     94a:	64 9f       	mul	r22, r20
     94c:	90 01       	movw	r18, r0
     94e:	65 9f       	mul	r22, r21
     950:	30 0d       	add	r19, r0
     952:	11 24       	eor	r1, r1
     954:	03 2e       	mov	r0, r19
     956:	00 0c       	add	r0, r0
     958:	44 0b       	sbc	r20, r20
     95a:	55 0b       	sbc	r21, r21
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	89 2b       	or	r24, r25
     96a:	8a 2b       	or	r24, r26
     96c:	8b 2b       	or	r24, r27
     96e:	41 f4       	brne	.+16     	; 0x980 <__stack+0x81>
			{
				cont2++;
     970:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
				flag3 = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag3>
			}
		}

	}
	if (aux3 > 0)
     980:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <aux3>
     984:	88 23       	and	r24, r24
     986:	49 f0       	breq	.+18     	; 0x99a <__stack+0x9b>
	{
		if (cont2 < 4)
     988:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	18 f4       	brcc	.+6      	; 0x996 <__stack+0x97>
		{
			cont2 = 4;
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <cont2>
		}
		aux3 = 0;
     996:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <aux3>
	}
}
     99a:	00 00       	nop
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <display>:
void display ()
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	cd 56       	subi	r28, 0x6D	; 109
     9ce:	d1 09       	sbc	r29, r1
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
	unsigned char tempo1[3], tempo2[3], tempo3[3], tempo4[100];

	nokia_lcd_clear(); //Limpa o LCD
     9da:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <nokia_lcd_clear>

	if (aux == 0)
     9de:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <aux>
     9e2:	88 23       	and	r24, r24
     9e4:	31 f4       	brne	.+12     	; 0x9f2 <display+0x2e>
	{
		nokia_lcd_write_string("Modo M.", 1); //Escreve um texto do tamanho 1
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <display+0x38>

	}
	else
	{
		nokia_lcd_write_string("Modo A.", 1); //Escreve um texto do tamanho 1
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	8b e0       	ldi	r24, 0x0B	; 11
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	}

	if (tempo == 0)
     9fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tempo>
     a00:	88 23       	and	r24, r24
     a02:	51 f4       	brne	.+20     	; 0xa18 <display+0x54>
	{
		nokia_lcd_set_cursor(0, 10);
     a04:	6a e0       	ldi	r22, 0x0A	; 10
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Dia", 1); //Escreve um texto do tamanho 1
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	83 e1       	ldi	r24, 0x13	; 19
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <display+0x66>

	}
	else
	{
		nokia_lcd_set_cursor(0, 10);
     a18:	6a e0       	ldi	r22, 0x0A	; 10
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Noite", 1); //Escreve um texto do tamanho 1
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	87 e1       	ldi	r24, 0x17	; 23
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	}
	nokia_lcd_set_cursor(0, 20); //Muda o cursor para a posição desejada
     a2a:	64 e1       	ldi	r22, 0x14	; 20
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Verde", 1);
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	8d e1       	ldi	r24, 0x1D	; 29
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
     a3c:	6e e1       	ldi	r22, 0x1E	; 30
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Amare", 1);
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	83 e2       	ldi	r24, 0x23	; 35
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 40);
     a4e:	68 e2       	ldi	r22, 0x28	; 40
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Verme", 1);
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	89 e2       	ldi	r24, 0x29	; 41
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	sprintf(tempo1, "%u", verde);//Converte o valor em uma string
     a60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	29 2f       	mov	r18, r25
     a6a:	2f 93       	push	r18
     a6c:	8f 93       	push	r24
     a6e:	8f e2       	ldi	r24, 0x2F	; 47
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	89 2f       	mov	r24, r25
     a74:	8f 93       	push	r24
     a76:	8f e2       	ldi	r24, 0x2F	; 47
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	8f 93       	push	r24
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	9f 93       	push	r25
     a82:	8f 93       	push	r24
     a84:	0e 94 c4 0c 	call	0x1988	; 0x1988 <sprintf>
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
	nokia_lcd_set_cursor(35, 20);
     a94:	64 e1       	ldi	r22, 0x14	; 20
     a96:	83 e2       	ldi	r24, 0x23	; 35
     a98:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo1, 1);//Mostra no display o valor do tempo do sinal
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	sprintf(tempo2, "%u", amarelo);
     aa6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	29 2f       	mov	r18, r25
     ab0:	2f 93       	push	r18
     ab2:	8f 93       	push	r24
     ab4:	8f e2       	ldi	r24, 0x2F	; 47
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	89 2f       	mov	r24, r25
     aba:	8f 93       	push	r24
     abc:	8f e2       	ldi	r24, 0x2F	; 47
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	8f 93       	push	r24
     ac2:	ce 01       	movw	r24, r28
     ac4:	04 96       	adiw	r24, 0x04	; 4
     ac6:	29 2f       	mov	r18, r25
     ac8:	2f 93       	push	r18
     aca:	8f 93       	push	r24
     acc:	0e 94 c4 0c 	call	0x1988	; 0x1988 <sprintf>
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
	nokia_lcd_set_cursor(35, 30);
     adc:	6e e1       	ldi	r22, 0x1E	; 30
     ade:	83 e2       	ldi	r24, 0x23	; 35
     ae0:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo2, 1);
     ae4:	ce 01       	movw	r24, r28
     ae6:	04 96       	adiw	r24, 0x04	; 4
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	sprintf(tempo3, "%u", vermelho);
     aee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	29 2f       	mov	r18, r25
     af8:	2f 93       	push	r18
     afa:	8f 93       	push	r24
     afc:	8f e2       	ldi	r24, 0x2F	; 47
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	89 2f       	mov	r24, r25
     b02:	8f 93       	push	r24
     b04:	8f e2       	ldi	r24, 0x2F	; 47
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	8f 93       	push	r24
     b0a:	ce 01       	movw	r24, r28
     b0c:	07 96       	adiw	r24, 0x07	; 7
     b0e:	29 2f       	mov	r18, r25
     b10:	2f 93       	push	r18
     b12:	8f 93       	push	r24
     b14:	0e 94 c4 0c 	call	0x1988	; 0x1988 <sprintf>
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
	nokia_lcd_set_cursor(35, 40);
     b24:	68 e2       	ldi	r22, 0x28	; 40
     b26:	83 e2       	ldi	r24, 0x23	; 35
     b28:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo3, 1);
     b2c:	ce 01       	movw	r24, r28
     b2e:	07 96       	adiw	r24, 0x07	; 7
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>


	sprintf(tempo4, "%u", carmin);
     b36:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <carmin>
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	29 2f       	mov	r18, r25
     b40:	2f 93       	push	r18
     b42:	8f 93       	push	r24
     b44:	8f e2       	ldi	r24, 0x2F	; 47
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	89 2f       	mov	r24, r25
     b4a:	8f 93       	push	r24
     b4c:	8f e2       	ldi	r24, 0x2F	; 47
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	8f 93       	push	r24
     b52:	ce 01       	movw	r24, r28
     b54:	0a 96       	adiw	r24, 0x0a	; 10
     b56:	29 2f       	mov	r18, r25
     b58:	2f 93       	push	r18
     b5a:	8f 93       	push	r24
     b5c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <sprintf>
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
	nokia_lcd_set_cursor(53, 0);
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	85 e3       	ldi	r24, 0x35	; 53
     b70:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(tempo4, 2);
     b74:	ce 01       	movw	r24, r28
     b76:	0a 96       	adiw	r24, 0x0a	; 10
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(53, 15);
     b7e:	6f e0       	ldi	r22, 0x0F	; 15
     b80:	85 e3       	ldi	r24, 0x35	; 53
     b82:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("C/Min", 1);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	82 e3       	ldi	r24, 0x32	; 50
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>

	switch(cont)  //Usado para indicar em qual sinal o usuário está incrementando ou decrementando
     b90:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     b94:	88 2f       	mov	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	91 05       	cpc	r25, r1
     b9c:	11 f1       	breq	.+68     	; 0xbe2 <display+0x21e>
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	2c f4       	brge	.+10     	; 0xbae <display+0x1ea>
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	49 f0       	breq	.+18     	; 0xbba <display+0x1f6>
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	89 f0       	breq	.+34     	; 0xbce <display+0x20a>
     bac:	38 c0       	rjmp	.+112    	; 0xc1e <display+0x25a>
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	91 05       	cpc	r25, r1
     bb2:	09 f1       	breq	.+66     	; 0xbf6 <display+0x232>
     bb4:	04 97       	sbiw	r24, 0x04	; 4
     bb6:	49 f1       	breq	.+82     	; 0xc0a <display+0x246>
     bb8:	32 c0       	rjmp	.+100    	; 0xc1e <display+0x25a>
	{
	case 0:
		nokia_lcd_set_cursor(45, 0);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	8d e2       	ldi	r24, 0x2D	; 45
     bbe:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("<", 1);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	88 e3       	ldi	r24, 0x38	; 56
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		break;
     bcc:	28 c0       	rjmp	.+80     	; 0xc1e <display+0x25a>
	case 1:
		nokia_lcd_set_cursor(45, 10);
     bce:	6a e0       	ldi	r22, 0x0A	; 10
     bd0:	8d e2       	ldi	r24, 0x2D	; 45
     bd2:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("<", 1);
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	88 e3       	ldi	r24, 0x38	; 56
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		break;
     be0:	1e c0       	rjmp	.+60     	; 0xc1e <display+0x25a>
	case 2:
		nokia_lcd_set_cursor(45, 20);
     be2:	64 e1       	ldi	r22, 0x14	; 20
     be4:	8d e2       	ldi	r24, 0x2D	; 45
     be6:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("<", 1);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	88 e3       	ldi	r24, 0x38	; 56
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		break;
     bf4:	14 c0       	rjmp	.+40     	; 0xc1e <display+0x25a>
	case 3:
		nokia_lcd_set_cursor(45, 30);
     bf6:	6e e1       	ldi	r22, 0x1E	; 30
     bf8:	8d e2       	ldi	r24, 0x2D	; 45
     bfa:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("<", 1);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	88 e3       	ldi	r24, 0x38	; 56
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		break;
     c08:	0a c0       	rjmp	.+20     	; 0xc1e <display+0x25a>
	case 4:
		nokia_lcd_set_cursor(45, 40);
     c0a:	68 e2       	ldi	r22, 0x28	; 40
     c0c:	8d e2       	ldi	r24, 0x2D	; 45
     c0e:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("<", 1);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	88 e3       	ldi	r24, 0x38	; 56
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		break;
     c1c:	00 00       	nop
	}
	nokia_lcd_render();
     c1e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <nokia_lcd_render>

}
     c22:	00 00       	nop
     c24:	c3 59       	subi	r28, 0x93	; 147
     c26:	df 4f       	sbci	r29, 0xFF	; 255
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <luminaria>:
void luminaria()
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	if (luz) // Caso possua intensidade menor que 300 Lux
     c40:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <luz>
     c44:	88 23       	and	r24, r24
     c46:	d1 f1       	breq	.+116    	; 0xcbc <luminaria+0x84>
	{
		if (pessoa == 1 || aux2 > 0) // Caso detecte pedestres ou veículos
     c48:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <pessoa>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	21 f0       	breq	.+8      	; 0xc58 <luminaria+0x20>
     c50:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <aux2>
     c54:	88 23       	and	r24, r24
     c56:	51 f0       	breq	.+20     	; 0xc6c <luminaria+0x34>
		{
			OCR0B = 255;
     c58:	88 e4       	ldi	r24, 0x48	; 72
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
			pessoa = 0;
     c62:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <pessoa>
			aux2 = 0;
     c66:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <aux2>
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <luminaria+0x3e>
		}
		else
		{
			OCR0B = 77;
     c6c:	88 e4       	ldi	r24, 0x48	; 72
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	2d e4       	ldi	r18, 0x4D	; 77
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
		}

		PORTD = 0b01111110;// Acende a luminária
     c76:	8b e2       	ldi	r24, 0x2B	; 43
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	2e e7       	ldi	r18, 0x7E	; 126
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
		if(cont2 == 4) //Acende o amarelo
     c80:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	31 f4       	brne	.+12     	; 0xc94 <luminaria+0x5c>
		{
			PORTD = 0b11111110;
     c88:	8b e2       	ldi	r24, 0x2B	; 43
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	2e ef       	ldi	r18, 0xFE	; 254
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
     c92:	12 c0       	rjmp	.+36     	; 0xcb8 <luminaria+0x80>
		}
		else if (cont2 == 5)
     c94:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	71 f4       	brne	.+28     	; 0xcb8 <luminaria+0x80>
		{
			if (cont2 > 4)
     c9c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	28 f0       	brcs	.+10     	; 0xcae <luminaria+0x76>
			{
				PORTD = 0b01111111;
     ca4:	8b e2       	ldi	r24, 0x2B	; 43
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	2f e7       	ldi	r18, 0x7F	; 127
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
			}
			PORTB = 0b11110000;//Acende os vermelhos
     cae:	85 e2       	ldi	r24, 0x25	; 37
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	20 ef       	ldi	r18, 0xF0	; 240
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
		}
		luz = 0;
     cb8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <luz>
	}

}
     cbc:	00 00       	nop
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <leitura_sensores>:
void leitura_sensores (uint8_t *flagdisp)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	c6 56       	subi	r28, 0x66	; 102
     cce:	d1 09       	sbc	r29, r1
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	9e 01       	movw	r18, r28
     cdc:	2b 59       	subi	r18, 0x9B	; 155
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	f9 01       	movw	r30, r18
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
	unsigned char lux[100];

	if (*flagdisp)
     ce6:	ce 01       	movw	r24, r28
     ce8:	8b 59       	subi	r24, 0x9B	; 155
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	fc 01       	movw	r30, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <leitura_sensores+0x38>
     cfa:	4e c0       	rjmp	.+156    	; 0xd98 <leitura_sensores+0xd4>
	{
		sprintf(lux, "%u", 1023000 / ADC - 1000);
     cfc:	88 e7       	ldi	r24, 0x78	; 120
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	9c 01       	movw	r18, r24
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	88 e1       	ldi	r24, 0x18	; 24
     d0e:	9c e9       	ldi	r25, 0x9C	; 156
     d10:	af e0       	ldi	r26, 0x0F	; 15
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 a5 0c 	call	0x194a	; 0x194a <__divmodsi4>
     d1c:	da 01       	movw	r26, r20
     d1e:	c9 01       	movw	r24, r18
     d20:	88 5e       	subi	r24, 0xE8	; 232
     d22:	93 40       	sbci	r25, 0x03	; 3
     d24:	a1 09       	sbc	r26, r1
     d26:	b1 09       	sbc	r27, r1
     d28:	2b 2f       	mov	r18, r27
     d2a:	2f 93       	push	r18
     d2c:	2a 2f       	mov	r18, r26
     d2e:	2f 93       	push	r18
     d30:	29 2f       	mov	r18, r25
     d32:	2f 93       	push	r18
     d34:	8f 93       	push	r24
     d36:	8f e2       	ldi	r24, 0x2F	; 47
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	89 2f       	mov	r24, r25
     d3c:	8f 93       	push	r24
     d3e:	8f e2       	ldi	r24, 0x2F	; 47
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	8f 93       	push	r24
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9f 93       	push	r25
     d4a:	8f 93       	push	r24
     d4c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <sprintf>
     d50:	8d b7       	in	r24, 0x3d	; 61
     d52:	9e b7       	in	r25, 0x3e	; 62
     d54:	08 96       	adiw	r24, 0x08	; 8
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61

		nokia_lcd_set_cursor(53, 25);
     d60:	69 e1       	ldi	r22, 0x19	; 25
     d62:	85 e3       	ldi	r24, 0x35	; 53
     d64:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string(lux, 2);
     d68:	62 e0       	ldi	r22, 0x02	; 2
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(55, 40);
     d72:	68 e2       	ldi	r22, 0x28	; 40
     d74:	87 e3       	ldi	r24, 0x37	; 55
     d76:	0e 94 27 0b 	call	0x164e	; 0x164e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Lux", 1);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8a e3       	ldi	r24, 0x3A	; 58
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 04 0b 	call	0x1608	; 0x1608 <nokia_lcd_write_string>
		nokia_lcd_render();
     d84:	0e 94 3a 0b 	call	0x1674	; 0x1674 <nokia_lcd_render>
		*flagdisp = 0;
     d88:	ce 01       	movw	r24, r28
     d8a:	8b 59       	subi	r24, 0x9B	; 155
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	fc 01       	movw	r30, r24
     d96:	10 82       	st	Z, r1

	}

}
     d98:	00 00       	nop
     d9a:	ca 59       	subi	r28, 0x9A	; 154
     d9c:	df 4f       	sbci	r29, 0xFF	; 255
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <sinal>:
void sinal ()
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	if (verde != 0 || vermelho != 0 || amarelo != 0)
     db6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dba:	88 23       	and	r24, r24
     dbc:	49 f4       	brne	.+18     	; 0xdd0 <sinal+0x22>
     dbe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <vermelho>
     dc2:	88 23       	and	r24, r24
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <sinal+0x22>
     dc6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <amarelo>
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <sinal+0x22>
     dce:	5c c0       	rjmp	.+184    	; 0xe88 <sinal+0xda>
	{

		if(flag1)  //Caso seja verdadeira
     dd0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <flag1>
     dd4:	88 23       	and	r24, r24
     dd6:	e1 f0       	breq	.+56     	; 0xe10 <sinal+0x62>
		{
			PORTD = 0b01011110;
     dd8:	8b e2       	ldi	r24, 0x2B	; 43
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2e e5       	ldi	r18, 0x5E	; 94
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
			PORTB = PORTB >> 0b01; //Decrementa o sinal verde
     de2:	85 e2       	ldi	r24, 0x25	; 37
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	25 e2       	ldi	r18, 0x25	; 37
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	26 95       	lsr	r18
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
			flag1 = 0;
     df4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <flag1>
			if(cont2 == 4) //Acende o amarelo
     df8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	b9 f5       	brne	.+110    	; 0xe6e <sinal+0xc0>
			{
				PORTD = 0b11011110;
     e00:	8b e2       	ldi	r24, 0x2B	; 43
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	2e ed       	ldi	r18, 0xDE	; 222
     e06:	fc 01       	movw	r30, r24
     e08:	20 83       	st	Z, r18
				flag2 = 0;//Zera a flag
     e0a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <flag2>
     e0e:	2f c0       	rjmp	.+94     	; 0xe6e <sinal+0xc0>
			}
		}
		else if (flag2 == 1 && cont2 == 5)
     e10:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <flag2>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	89 f4       	brne	.+34     	; 0xe3a <sinal+0x8c>
     e18:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     e1c:	85 30       	cpi	r24, 0x05	; 5
     e1e:	69 f4       	brne	.+26     	; 0xe3a <sinal+0x8c>
		{
			PORTD = 0b01011111;//Apaga o amarelo
     e20:	8b e2       	ldi	r24, 0x2B	; 43
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	2f e5       	ldi	r18, 0x5F	; 95
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
			PORTB = 0b11110000;//Acende os vermelhos
     e2a:	85 e2       	ldi	r24, 0x25	; 37
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	20 ef       	ldi	r18, 0xF0	; 240
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
			flag2 = 0;
     e34:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <flag2>
     e38:	1a c0       	rjmp	.+52     	; 0xe6e <sinal+0xc0>
		}
		else if(flag3)
     e3a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag3>
     e3e:	88 23       	and	r24, r24
     e40:	b1 f0       	breq	.+44     	; 0xe6e <sinal+0xc0>
		{
			PORTB = PORTB << 0b01;//Decrementa o vermelho
     e42:	85 e2       	ldi	r24, 0x25	; 37
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	25 e2       	ldi	r18, 0x25	; 37
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	22 0f       	add	r18, r18
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
			flag3 = 0;
     e54:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <flag3>
			if (cont2 == 9)
     e58:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     e5c:	89 30       	cpi	r24, 0x09	; 9
     e5e:	39 f4       	brne	.+14     	; 0xe6e <sinal+0xc0>
			{
				PORTB = 0b00001111;//Acende o vermelho
     e60:	85 e2       	ldi	r24, 0x25	; 37
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	2f e0       	ldi	r18, 0x0F	; 15
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
				cont2 = 0;
     e6a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cont2>
			}
		}
		if (cont2 > 4 && luz != 1)
     e6e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <cont2>
     e72:	85 30       	cpi	r24, 0x05	; 5
     e74:	48 f0       	brcs	.+18     	; 0xe88 <sinal+0xda>
     e76:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <luz>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	29 f0       	breq	.+10     	; 0xe88 <sinal+0xda>
		{
			PORTD = 0b01011111;
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	2f e5       	ldi	r18, 0x5F	; 95
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
		}
	}
	luminaria();
     e88:	0e 94 1c 06 	call	0xc38	; 0xc38 <luminaria>
}
     e8c:	00 00       	nop
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <main>:

int main(void)
{
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0b11111111; // Habilitando os pinos PB0...7 como saídas;
     e9c:	84 e2       	ldi	r24, 0x24	; 36
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 83       	st	Z, r18
	DDRD = 0b11100001; // Habilitando o pino PD7 como saída e os pinos PD0 e PD1 como entrada;
     ea6:	8a e2       	ldi	r24, 0x2A	; 42
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	21 ee       	ldi	r18, 0xE1	; 225
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
	DDRC = 0b10111110;
     eb0:	87 e2       	ldi	r24, 0x27	; 39
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	2e eb       	ldi	r18, 0xBE	; 190
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
	PORTD = 0b00011110;// Habilita o resistor de pull-up do pino PD0 e PD1
     eba:	8b e2       	ldi	r24, 0x2B	; 43
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2e e1       	ldi	r18, 0x1E	; 30
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
	PORTC = 0b01000000;
     ec4:	88 e2       	ldi	r24, 0x28	; 40
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	20 e4       	ldi	r18, 0x40	; 64
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18

	//Configuração das interrupções
	EICRA = 0b00001010; //Interrupção externa INT0 e INT1 na borda de descida
     ece:	89 e6       	ldi	r24, 0x69	; 105
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2a e0       	ldi	r18, 0x0A	; 10
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
	EIMSK = 0b00000011; // Habilita a interrupção externa
     ed8:	8d e3       	ldi	r24, 0x3D	; 61
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	23 e0       	ldi	r18, 0x03	; 3
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
	PCICR = 0b00000110;// Interrupção externa da porta D
     ee2:	88 e6       	ldi	r24, 0x68	; 104
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	26 e0       	ldi	r18, 0x06	; 6
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
	PCMSK2 = 0b00010010;
     eec:	8d e6       	ldi	r24, 0x6D	; 109
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	22 e1       	ldi	r18, 0x12	; 18
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
	PCMSK1 = 0b01000000;
     ef6:	8c e6       	ldi	r24, 0x6C	; 108
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	20 e4       	ldi	r18, 0x40	; 64
     efc:	fc 01       	movw	r30, r24
     efe:	20 83       	st	Z, r18

	//Configuração do Timer 0
	TCCR0A = 0b10100011;
     f00:	84 e4       	ldi	r24, 0x44	; 68
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	23 ea       	ldi	r18, 0xA3	; 163
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18
	//TCCR0A = 0b00000010;
	TCCR0B = 0b00000011;
     f0a:	85 e4       	ldi	r24, 0x45	; 69
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	23 e0       	ldi	r18, 0x03	; 3
     f10:	fc 01       	movw	r30, r24
     f12:	20 83       	st	Z, r18
	OCR0B = 77;
     f14:	88 e4       	ldi	r24, 0x48	; 72
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2d e4       	ldi	r18, 0x4D	; 77
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
	OCR0A = 249;
     f1e:	87 e4       	ldi	r24, 0x47	; 71
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	29 ef       	ldi	r18, 0xF9	; 249
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010;
     f28:	8e e6       	ldi	r24, 0x6E	; 110
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	22 e0       	ldi	r18, 0x02	; 2
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18

	//Configuração do ADC
	ADMUX = 0b01000000;
     f32:	8c e7       	ldi	r24, 0x7C	; 124
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	20 e4       	ldi	r18, 0x40	; 64
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
	ADCSRA = 0b11100111;
     f3c:	8a e7       	ldi	r24, 0x7A	; 122
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	27 ee       	ldi	r18, 0xE7	; 231
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
	ADCSRB = 0b00000000;
     f46:	8b e7       	ldi	r24, 0x7B	; 123
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	fc 01       	movw	r30, r24
     f4c:	10 82       	st	Z, r1
	DIDR0 = 0b00000000;
     f4e:	8e e7       	ldi	r24, 0x7E	; 126
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	10 82       	st	Z, r1

	sei();
     f56:	78 94       	sei
	PORTB = 0b00001111;
     f58:	85 e2       	ldi	r24, 0x25	; 37
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	2f e0       	ldi	r18, 0x0F	; 15
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
	nokia_lcd_init(); //Inicia o LCD
     f62:	0e 94 51 08 	call	0x10a2	; 0x10a2 <nokia_lcd_init>
	display();
     f66:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <display>
	/* Replace with your application code */
	while (1)
	{
		sinal();// Chamando a função responsável pela saída do sinal;
     f6a:	0e 94 d7 06 	call	0xdae	; 0xdae <sinal>
		leitura_sensores(&flag5);
     f6e:	89 e4       	ldi	r24, 0x49	; 73
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 62 06 	call	0xcc4	; 0xcc4 <leitura_sensores>

	}
     f76:	f9 cf       	rjmp	.-14     	; 0xf6a <main+0xd6>

00000f78 <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <write+0x8>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	6a 83       	std	Y+2, r22	; 0x02
     f88:	88 e2       	ldi	r24, 0x28	; 40
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	28 e2       	ldi	r18, 0x28	; 40
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	27 7f       	andi	r18, 0xF7	; 247
     f96:	fc 01       	movw	r30, r24
     f98:	20 83       	st	Z, r18
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	88 23       	and	r24, r24
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <write+0x3c>
     fa0:	88 e2       	ldi	r24, 0x28	; 40
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	28 e2       	ldi	r18, 0x28	; 40
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	24 60       	ori	r18, 0x04	; 4
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <write+0x4e>
     fb4:	88 e2       	ldi	r24, 0x28	; 40
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	28 e2       	ldi	r18, 0x28	; 40
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	f9 01       	movw	r30, r18
     fbe:	20 81       	ld	r18, Z
     fc0:	2b 7f       	andi	r18, 0xFB	; 251
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	3c c0       	rjmp	.+120    	; 0x1042 <write+0xca>
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	21 2f       	mov	r18, r17
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	47 e0       	ldi	r20, 0x07	; 7
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	ba 01       	movw	r22, r20
     fda:	62 1b       	sub	r22, r18
     fdc:	73 0b       	sbc	r23, r19
     fde:	9b 01       	movw	r18, r22
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <write+0x6e>
     fe2:	95 95       	asr	r25
     fe4:	87 95       	ror	r24
     fe6:	2a 95       	dec	r18
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <write+0x6a>
     fea:	81 70       	andi	r24, 0x01	; 1
     fec:	99 27       	eor	r25, r25
     fee:	89 2b       	or	r24, r25
     ff0:	51 f0       	breq	.+20     	; 0x1006 <write+0x8e>
     ff2:	88 e2       	ldi	r24, 0x28	; 40
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	28 e2       	ldi	r18, 0x28	; 40
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	22 60       	ori	r18, 0x02	; 2
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <write+0xa0>
    1006:	88 e2       	ldi	r24, 0x28	; 40
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	28 e2       	ldi	r18, 0x28	; 40
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2d 7f       	andi	r18, 0xFD	; 253
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
    1018:	88 e2       	ldi	r24, 0x28	; 40
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	28 e2       	ldi	r18, 0x28	; 40
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	20 62       	ori	r18, 0x20	; 32
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
    102a:	88 e2       	ldi	r24, 0x28	; 40
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	28 e2       	ldi	r18, 0x28	; 40
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	f9 01       	movw	r30, r18
    1034:	20 81       	ld	r18, Z
    1036:	2f 7d       	andi	r18, 0xDF	; 223
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
    103c:	81 2f       	mov	r24, r17
    103e:	11 e0       	ldi	r17, 0x01	; 1
    1040:	18 0f       	add	r17, r24
    1042:	18 30       	cpi	r17, 0x08	; 8
    1044:	10 f2       	brcs	.-124    	; 0xfca <write+0x52>
    1046:	88 e2       	ldi	r24, 0x28	; 40
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	28 e2       	ldi	r18, 0x28	; 40
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	f9 01       	movw	r30, r18
    1050:	20 81       	ld	r18, Z
    1052:	28 60       	ori	r18, 0x08	; 8
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	00 00       	nop
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	08 95       	ret

00001066 <write_cmd>:
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	1f 92       	push	r1
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	0e 94 bc 07 	call	0xf78	; 0xf78 <write>
    107a:	00 00       	nop
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <write_data>:
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	1f 92       	push	r1
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	0e 94 bc 07 	call	0xf78	; 0xf78 <write>
    1098:	00 00       	nop
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <nokia_lcd_init>:
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	6c 97       	sbiw	r28, 0x1c	; 28
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	87 e2       	ldi	r24, 0x27	; 39
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	27 e2       	ldi	r18, 0x27	; 39
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	28 60       	ori	r18, 0x08	; 8
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	87 e2       	ldi	r24, 0x27	; 39
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	27 e2       	ldi	r18, 0x27	; 39
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	20 61       	ori	r18, 0x10	; 16
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
    10de:	87 e2       	ldi	r24, 0x27	; 39
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	27 e2       	ldi	r18, 0x27	; 39
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	24 60       	ori	r18, 0x04	; 4
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	87 e2       	ldi	r24, 0x27	; 39
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	27 e2       	ldi	r18, 0x27	; 39
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	22 60       	ori	r18, 0x02	; 2
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
    1102:	87 e2       	ldi	r24, 0x27	; 39
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	27 e2       	ldi	r18, 0x27	; 39
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	20 62       	ori	r18, 0x20	; 32
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
    1114:	88 e2       	ldi	r24, 0x28	; 40
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	28 e2       	ldi	r18, 0x28	; 40
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	20 61       	ori	r18, 0x10	; 16
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
    1126:	88 e2       	ldi	r24, 0x28	; 40
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	28 e2       	ldi	r18, 0x28	; 40
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	28 60       	ori	r18, 0x08	; 8
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a0 e2       	ldi	r26, 0x20	; 32
    113e:	b1 e4       	ldi	r27, 0x41	; 65
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	ab 83       	std	Y+3, r26	; 0x03
    1146:	bc 83       	std	Y+4, r27	; 0x04
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a e7       	ldi	r20, 0x7A	; 122
    114e:	53 e4       	ldi	r21, 0x43	; 67
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8b 8b       	std	Y+19, r24	; 0x13
    1162:	9c 8b       	std	Y+20, r25	; 0x14
    1164:	ad 8b       	std	Y+21, r26	; 0x15
    1166:	be 8b       	std	Y+22, r27	; 0x16
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	6b 89       	ldd	r22, Y+19	; 0x13
    1172:	7c 89       	ldd	r23, Y+20	; 0x14
    1174:	8d 89       	ldd	r24, Y+21	; 0x15
    1176:	9e 89       	ldd	r25, Y+22	; 0x16
    1178:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__cmpsf2>
    117c:	88 23       	and	r24, r24
    117e:	2c f4       	brge	.+10     	; 0x118a <nokia_lcd_init+0xe8>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	98 8f       	std	Y+24, r25	; 0x18
    1186:	8f 8b       	std	Y+23, r24	; 0x17
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <nokia_lcd_init+0x166>
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	4f e7       	ldi	r20, 0x7F	; 127
    1190:	57 e4       	ldi	r21, 0x47	; 71
    1192:	6b 89       	ldd	r22, Y+19	; 0x13
    1194:	7c 89       	ldd	r23, Y+20	; 0x14
    1196:	8d 89       	ldd	r24, Y+21	; 0x15
    1198:	9e 89       	ldd	r25, Y+22	; 0x16
    119a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__gesf2>
    119e:	18 16       	cp	r1, r24
    11a0:	4c f5       	brge	.+82     	; 0x11f4 <nokia_lcd_init+0x152>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e2       	ldi	r20, 0x20	; 32
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	69 81       	ldd	r22, Y+1	; 0x01
    11ac:	7a 81       	ldd	r23, Y+2	; 0x02
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	98 8f       	std	Y+24, r25	; 0x18
    11c8:	8f 8b       	std	Y+23, r24	; 0x17
    11ca:	0f c0       	rjmp	.+30     	; 0x11ea <nokia_lcd_init+0x148>
    11cc:	89 e1       	ldi	r24, 0x19	; 25
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	89 8f       	std	Y+25, r24	; 0x19
    11d4:	89 8d       	ldd	r24, Y+25	; 0x19
    11d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <nokia_lcd_init+0x136>
    11dc:	9a 8f       	std	Y+26, r25	; 0x1a
    11de:	89 8f       	std	Y+25, r24	; 0x19
    11e0:	8f 89       	ldd	r24, Y+23	; 0x17
    11e2:	98 8d       	ldd	r25, Y+24	; 0x18
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	98 8f       	std	Y+24, r25	; 0x18
    11e8:	8f 8b       	std	Y+23, r24	; 0x17
    11ea:	8f 89       	ldd	r24, Y+23	; 0x17
    11ec:	98 8d       	ldd	r25, Y+24	; 0x18
    11ee:	89 2b       	or	r24, r25
    11f0:	69 f7       	brne	.-38     	; 0x11cc <nokia_lcd_init+0x12a>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <nokia_lcd_init+0x17a>
    11f4:	6b 89       	ldd	r22, Y+19	; 0x13
    11f6:	7c 89       	ldd	r23, Y+20	; 0x14
    11f8:	8d 89       	ldd	r24, Y+21	; 0x15
    11fa:	9e 89       	ldd	r25, Y+22	; 0x16
    11fc:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	98 8f       	std	Y+24, r25	; 0x18
    1206:	8f 8b       	std	Y+23, r24	; 0x17
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	9c 8f       	std	Y+28, r25	; 0x1c
    120e:	8b 8f       	std	Y+27, r24	; 0x1b
    1210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <nokia_lcd_init+0x172>
    1218:	9c 8f       	std	Y+28, r25	; 0x1c
    121a:	8b 8f       	std	Y+27, r24	; 0x1b
    121c:	88 e2       	ldi	r24, 0x28	; 40
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	28 e2       	ldi	r18, 0x28	; 40
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	f9 01       	movw	r30, r18
    1226:	20 81       	ld	r18, Z
    1228:	2f 7e       	andi	r18, 0xEF	; 239
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	ac e8       	ldi	r26, 0x8C	; 140
    1234:	b2 e4       	ldi	r27, 0x42	; 66
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	af 83       	std	Y+7, r26	; 0x07
    123c:	b8 87       	std	Y+8, r27	; 0x08
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	4a e7       	ldi	r20, 0x7A	; 122
    1244:	53 e4       	ldi	r21, 0x43	; 67
    1246:	6d 81       	ldd	r22, Y+5	; 0x05
    1248:	7e 81       	ldd	r23, Y+6	; 0x06
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	89 87       	std	Y+9, r24	; 0x09
    1258:	9a 87       	std	Y+10, r25	; 0x0a
    125a:	ab 87       	std	Y+11, r26	; 0x0b
    125c:	bc 87       	std	Y+12, r27	; 0x0c
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	69 85       	ldd	r22, Y+9	; 0x09
    1268:	7a 85       	ldd	r23, Y+10	; 0x0a
    126a:	8b 85       	ldd	r24, Y+11	; 0x0b
    126c:	9c 85       	ldd	r25, Y+12	; 0x0c
    126e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__cmpsf2>
    1272:	88 23       	and	r24, r24
    1274:	2c f4       	brge	.+10     	; 0x1280 <nokia_lcd_init+0x1de>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9e 87       	std	Y+14, r25	; 0x0e
    127c:	8d 87       	std	Y+13, r24	; 0x0d
    127e:	3f c0       	rjmp	.+126    	; 0x12fe <nokia_lcd_init+0x25c>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	3f ef       	ldi	r19, 0xFF	; 255
    1284:	4f e7       	ldi	r20, 0x7F	; 127
    1286:	57 e4       	ldi	r21, 0x47	; 71
    1288:	69 85       	ldd	r22, Y+9	; 0x09
    128a:	7a 85       	ldd	r23, Y+10	; 0x0a
    128c:	8b 85       	ldd	r24, Y+11	; 0x0b
    128e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1290:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__gesf2>
    1294:	18 16       	cp	r1, r24
    1296:	4c f5       	brge	.+82     	; 0x12ea <nokia_lcd_init+0x248>
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e2       	ldi	r20, 0x20	; 32
    129e:	51 e4       	ldi	r21, 0x41	; 65
    12a0:	6d 81       	ldd	r22, Y+5	; 0x05
    12a2:	7e 81       	ldd	r23, Y+6	; 0x06
    12a4:	8f 81       	ldd	r24, Y+7	; 0x07
    12a6:	98 85       	ldd	r25, Y+8	; 0x08
    12a8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9e 87       	std	Y+14, r25	; 0x0e
    12be:	8d 87       	std	Y+13, r24	; 0x0d
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <nokia_lcd_init+0x23e>
    12c2:	89 e1       	ldi	r24, 0x19	; 25
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	98 8b       	std	Y+16, r25	; 0x10
    12c8:	8f 87       	std	Y+15, r24	; 0x0f
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	98 89       	ldd	r25, Y+16	; 0x10
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <nokia_lcd_init+0x22c>
    12d2:	98 8b       	std	Y+16, r25	; 0x10
    12d4:	8f 87       	std	Y+15, r24	; 0x0f
    12d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	9e 87       	std	Y+14, r25	; 0x0e
    12de:	8d 87       	std	Y+13, r24	; 0x0d
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	89 2b       	or	r24, r25
    12e6:	69 f7       	brne	.-38     	; 0x12c2 <nokia_lcd_init+0x220>
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <nokia_lcd_init+0x270>
    12ea:	69 85       	ldd	r22, Y+9	; 0x09
    12ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    12ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 87       	std	Y+14, r25	; 0x0e
    12fc:	8d 87       	std	Y+13, r24	; 0x0d
    12fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1300:	9e 85       	ldd	r25, Y+14	; 0x0e
    1302:	9a 8b       	std	Y+18, r25	; 0x12
    1304:	89 8b       	std	Y+17, r24	; 0x11
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <nokia_lcd_init+0x268>
    130e:	9a 8b       	std	Y+18, r25	; 0x12
    1310:	89 8b       	std	Y+17, r24	; 0x11
    1312:	88 e2       	ldi	r24, 0x28	; 40
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	28 e2       	ldi	r18, 0x28	; 40
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	20 61       	ori	r18, 0x10	; 16
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
    1324:	88 e2       	ldi	r24, 0x28	; 40
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	28 e2       	ldi	r18, 0x28	; 40
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	20 81       	ld	r18, Z
    1330:	27 7f       	andi	r18, 0xF7	; 247
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
    1336:	81 e2       	ldi	r24, 0x21	; 33
    1338:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    133c:	83 e1       	ldi	r24, 0x13	; 19
    133e:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1342:	86 e0       	ldi	r24, 0x06	; 6
    1344:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1348:	82 ec       	ldi	r24, 0xC2	; 194
    134a:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    134e:	80 e2       	ldi	r24, 0x20	; 32
    1350:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1354:	89 e0       	ldi	r24, 0x09	; 9
    1356:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1360:	80 e4       	ldi	r24, 0x40	; 64
    1362:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1366:	00 e0       	ldi	r16, 0x00	; 0
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <nokia_lcd_init+0x2d4>
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	0e 94 42 08 	call	0x1084	; 0x1084 <write_data>
    1372:	0f 5f       	subi	r16, 0xFF	; 255
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	08 3f       	cpi	r16, 0xF8	; 248
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	1f 07       	cpc	r17, r31
    137c:	b8 f3       	brcs	.-18     	; 0x136c <nokia_lcd_init+0x2ca>
    137e:	88 e0       	ldi	r24, 0x08	; 8
    1380:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    1384:	8c e0       	ldi	r24, 0x0C	; 12
    1386:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    138a:	00 00       	nop
    138c:	6c 96       	adiw	r28, 0x1c	; 28
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <nokia_lcd_clear>:
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	80 e8       	ldi	r24, 0x80	; 128
    13b0:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    13b4:	80 e4       	ldi	r24, 0x40	; 64
    13b6:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
    13ba:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
    13be:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f9>
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <nokia_lcd_clear+0x34>
    13c8:	c8 01       	movw	r24, r16
    13ca:	80 5b       	subi	r24, 0xB0	; 176
    13cc:	9e 4f       	sbci	r25, 0xFE	; 254
    13ce:	fc 01       	movw	r30, r24
    13d0:	10 82       	st	Z, r1
    13d2:	0f 5f       	subi	r16, 0xFF	; 255
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	08 3f       	cpi	r16, 0xF8	; 248
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
    13da:	1f 07       	cpc	r17, r31
    13dc:	a8 f3       	brcs	.-22     	; 0x13c8 <nokia_lcd_clear+0x26>
    13de:	00 00       	nop
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <nokia_lcd_set_pixel+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <nokia_lcd_set_pixel+0x8>
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	8b 83       	std	Y+3, r24	; 0x03
    13fa:	6c 83       	std	Y+4, r22	; 0x04
    13fc:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	86 95       	lsr	r24
    1402:	86 95       	lsr	r24
    1404:	86 95       	lsr	r24
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	44 e5       	ldi	r20, 0x54	; 84
    140c:	48 9f       	mul	r20, r24
    140e:	90 01       	movw	r18, r0
    1410:	49 9f       	mul	r20, r25
    1412:	30 0d       	add	r19, r0
    1414:	11 24       	eor	r1, r1
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	80 5b       	subi	r24, 0xB0	; 176
    1422:	9e 4f       	sbci	r25, 0xFE	; 254
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	88 23       	and	r24, r24
    142c:	c9 f0       	breq	.+50     	; 0x1460 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 01       	movw	r18, r24
    1440:	27 70       	andi	r18, 0x07	; 7
    1442:	33 27       	eor	r19, r19
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <nokia_lcd_set_pixel+0x64>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	2a 95       	dec	r18
    1450:	e2 f7       	brpl	.-8      	; 0x144a <nokia_lcd_set_pixel+0x60>
    1452:	84 2b       	or	r24, r20
    1454:	28 2f       	mov	r18, r24
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    145e:	19 c0       	rjmp	.+50     	; 0x1492 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9c 01       	movw	r18, r24
    1472:	27 70       	andi	r18, 0x07	; 7
    1474:	33 27       	eor	r19, r19
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <nokia_lcd_set_pixel+0x96>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	2a 95       	dec	r18
    1482:	e2 f7       	brpl	.-8      	; 0x147c <nokia_lcd_set_pixel+0x92>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	28 2f       	mov	r18, r24
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
}
    1492:	00 00       	nop
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <nokia_lcd_write_char+0xa>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <nokia_lcd_write_char+0xc>
    14b0:	1f 92       	push	r1
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	8c 83       	std	Y+4, r24	; 0x04
    14b8:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	65 c0       	rjmp	.+202    	; 0x1588 <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	4e c0       	rjmp	.+156    	; 0x155e <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 01       	movw	r18, r24
    14ca:	20 52       	subi	r18, 0x20	; 32
    14cc:	31 09       	sbc	r19, r1
    14ce:	9d 81       	ldd	r25, Y+5	; 0x05
    14d0:	81 2f       	mov	r24, r17
    14d2:	69 2f       	mov	r22, r25
    14d4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__udivmodqi4>
    14d8:	48 2f       	mov	r20, r24
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	82 0f       	add	r24, r18
    14e8:	93 1f       	adc	r25, r19
    14ea:	84 0f       	add	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	88 59       	subi	r24, 0x98	; 152
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	fc 01       	movw	r30, r24
    14fc:	84 91       	lpm	r24, Z
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	80 2f       	mov	r24, r16
    150a:	69 2f       	mov	r22, r25
    150c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__udivmodqi4>
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <nokia_lcd_write_char+0x78>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <nokia_lcd_write_char+0x74>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	99 27       	eor	r25, r25
    1526:	89 2b       	or	r24, r25
    1528:	61 f0       	breq	.+24     	; 0x1542 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    152a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
    152e:	98 2f       	mov	r25, r24
    1530:	90 0f       	add	r25, r16
    1532:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
    1536:	81 0f       	add	r24, r17
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	69 2f       	mov	r22, r25
    153c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nokia_lcd_set_pixel>
    1540:	0b c0       	rjmp	.+22     	; 0x1558 <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1542:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
    1546:	98 2f       	mov	r25, r24
    1548:	90 0f       	add	r25, r16
    154a:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
    154e:	81 0f       	add	r24, r17
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	69 2f       	mov	r22, r25
    1554:	0e 94 f5 09 	call	0x13ea	; 0x13ea <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1558:	80 2f       	mov	r24, r16
    155a:	01 e0       	ldi	r16, 0x01	; 1
    155c:	08 0f       	add	r16, r24
    155e:	40 2f       	mov	r20, r16
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	c9 01       	movw	r24, r18
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	82 1b       	sub	r24, r18
    1578:	93 0b       	sbc	r25, r19
    157a:	48 17       	cp	r20, r24
    157c:	59 07       	cpc	r21, r25
    157e:	0c f4       	brge	.+2      	; 0x1582 <nokia_lcd_write_char+0xde>
    1580:	a0 cf       	rjmp	.-192    	; 0x14c2 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1582:	81 2f       	mov	r24, r17
    1584:	11 e0       	ldi	r17, 0x01	; 1
    1586:	18 0f       	add	r17, r24
    1588:	41 2f       	mov	r20, r17
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	c9 01       	movw	r24, r18
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 0f       	add	r24, r18
    159e:	93 1f       	adc	r25, r19
    15a0:	48 17       	cp	r20, r24
    15a2:	59 07       	cpc	r21, r25
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <nokia_lcd_write_char+0x104>
    15a6:	8b cf       	rjmp	.-234    	; 0x14be <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    15a8:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	89 2f       	mov	r24, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	88 0f       	add	r24, r24
    15b4:	89 0f       	add	r24, r25
    15b6:	82 0f       	add	r24, r18
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    15be:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <nokia_lcd+0x1f8>
    15c2:	84 35       	cpi	r24, 0x54	; 84
    15c4:	70 f0       	brcs	.+28     	; 0x15e2 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    15c6:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    15ca:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	89 2f       	mov	r24, r25
    15d2:	88 0f       	add	r24, r24
    15d4:	88 0f       	add	r24, r24
    15d6:	88 0f       	add	r24, r24
    15d8:	89 1b       	sub	r24, r25
    15da:	82 0f       	add	r24, r18
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    15e2:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <nokia_lcd+0x1f9>
    15e6:	80 33       	cpi	r24, 0x30	; 48
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    15ea:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    15ee:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <nokia_lcd+0x1f9>
	}
}
    15f2:	00 00       	nop
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	00 d0       	rcall	.+0      	; 0x160e <nokia_lcd_write_string+0x6>
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	9c 01       	movw	r18, r24
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	3a 83       	std	Y+2, r19	; 0x02
    1628:	29 83       	std	Y+1, r18	; 0x01
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	6b 81       	ldd	r22, Y+3	; 0x03
    1630:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	fc 01       	movw	r30, r24
    163a:	80 81       	ld	r24, Z
    163c:	88 23       	and	r24, r24
    163e:	71 f7       	brne	.-36     	; 0x161c <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1640:	00 00       	nop
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	00 d0       	rcall	.+0      	; 0x1654 <nokia_lcd_set_cursor+0x6>
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <nokia_lcd+0x1f9>
}
    1668:	00 00       	nop
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1680:	80 e8       	ldi	r24, 0x80	; 128
    1682:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>
	write_cmd(0x40);
    1686:	80 e4       	ldi	r24, 0x40	; 64
    1688:	0e 94 33 08 	call	0x1066	; 0x1066 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    168c:	00 e0       	ldi	r16, 0x00	; 0
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1692:	c8 01       	movw	r24, r16
    1694:	80 5b       	subi	r24, 0xB0	; 176
    1696:	9e 4f       	sbci	r25, 0xFE	; 254
    1698:	fc 01       	movw	r30, r24
    169a:	80 81       	ld	r24, Z
    169c:	0e 94 42 08 	call	0x1084	; 0x1084 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    16a0:	0f 5f       	subi	r16, 0xFF	; 255
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	08 3f       	cpi	r16, 0xF8	; 248
    16a6:	f1 e0       	ldi	r31, 0x01	; 1
    16a8:	1f 07       	cpc	r17, r31
    16aa:	98 f3       	brcs	.-26     	; 0x1692 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    16ac:	00 00       	nop
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <__cmpsf2>:
    16b8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fp_cmp>
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <__cmpsf2+0x8>
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	08 95       	ret

000016c2 <__fixunssfsi>:
    16c2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fp_splitA>
    16c6:	88 f0       	brcs	.+34     	; 0x16ea <__fixunssfsi+0x28>
    16c8:	9f 57       	subi	r25, 0x7F	; 127
    16ca:	98 f0       	brcs	.+38     	; 0x16f2 <__fixunssfsi+0x30>
    16cc:	b9 2f       	mov	r27, r25
    16ce:	99 27       	eor	r25, r25
    16d0:	b7 51       	subi	r27, 0x17	; 23
    16d2:	b0 f0       	brcs	.+44     	; 0x1700 <__fixunssfsi+0x3e>
    16d4:	e1 f0       	breq	.+56     	; 0x170e <__fixunssfsi+0x4c>
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a f0       	brmi	.+6      	; 0x16e6 <__fixunssfsi+0x24>
    16e0:	ba 95       	dec	r27
    16e2:	c9 f7       	brne	.-14     	; 0x16d6 <__fixunssfsi+0x14>
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <__fixunssfsi+0x4c>
    16e6:	b1 30       	cpi	r27, 0x01	; 1
    16e8:	91 f0       	breq	.+36     	; 0x170e <__fixunssfsi+0x4c>
    16ea:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fp_zero>
    16ee:	b1 e0       	ldi	r27, 0x01	; 1
    16f0:	08 95       	ret
    16f2:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_zero>
    16f6:	67 2f       	mov	r22, r23
    16f8:	78 2f       	mov	r23, r24
    16fa:	88 27       	eor	r24, r24
    16fc:	b8 5f       	subi	r27, 0xF8	; 248
    16fe:	39 f0       	breq	.+14     	; 0x170e <__fixunssfsi+0x4c>
    1700:	b9 3f       	cpi	r27, 0xF9	; 249
    1702:	cc f3       	brlt	.-14     	; 0x16f6 <__fixunssfsi+0x34>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b3 95       	inc	r27
    170c:	d9 f7       	brne	.-10     	; 0x1704 <__fixunssfsi+0x42>
    170e:	3e f4       	brtc	.+14     	; 0x171e <__fixunssfsi+0x5c>
    1710:	90 95       	com	r25
    1712:	80 95       	com	r24
    1714:	70 95       	com	r23
    1716:	61 95       	neg	r22
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	8f 4f       	sbci	r24, 0xFF	; 255
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	08 95       	ret

00001720 <__fp_cmp>:
    1720:	99 0f       	add	r25, r25
    1722:	00 08       	sbc	r0, r0
    1724:	55 0f       	add	r21, r21
    1726:	aa 0b       	sbc	r26, r26
    1728:	e0 e8       	ldi	r30, 0x80	; 128
    172a:	fe ef       	ldi	r31, 0xFE	; 254
    172c:	16 16       	cp	r1, r22
    172e:	17 06       	cpc	r1, r23
    1730:	e8 07       	cpc	r30, r24
    1732:	f9 07       	cpc	r31, r25
    1734:	c0 f0       	brcs	.+48     	; 0x1766 <__fp_cmp+0x46>
    1736:	12 16       	cp	r1, r18
    1738:	13 06       	cpc	r1, r19
    173a:	e4 07       	cpc	r30, r20
    173c:	f5 07       	cpc	r31, r21
    173e:	98 f0       	brcs	.+38     	; 0x1766 <__fp_cmp+0x46>
    1740:	62 1b       	sub	r22, r18
    1742:	73 0b       	sbc	r23, r19
    1744:	84 0b       	sbc	r24, r20
    1746:	95 0b       	sbc	r25, r21
    1748:	39 f4       	brne	.+14     	; 0x1758 <__fp_cmp+0x38>
    174a:	0a 26       	eor	r0, r26
    174c:	61 f0       	breq	.+24     	; 0x1766 <__fp_cmp+0x46>
    174e:	23 2b       	or	r18, r19
    1750:	24 2b       	or	r18, r20
    1752:	25 2b       	or	r18, r21
    1754:	21 f4       	brne	.+8      	; 0x175e <__fp_cmp+0x3e>
    1756:	08 95       	ret
    1758:	0a 26       	eor	r0, r26
    175a:	09 f4       	brne	.+2      	; 0x175e <__fp_cmp+0x3e>
    175c:	a1 40       	sbci	r26, 0x01	; 1
    175e:	a6 95       	lsr	r26
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	81 1d       	adc	r24, r1
    1764:	81 1d       	adc	r24, r1
    1766:	08 95       	ret

00001768 <__fp_split3>:
    1768:	57 fd       	sbrc	r21, 7
    176a:	90 58       	subi	r25, 0x80	; 128
    176c:	44 0f       	add	r20, r20
    176e:	55 1f       	adc	r21, r21
    1770:	59 f0       	breq	.+22     	; 0x1788 <__fp_splitA+0x10>
    1772:	5f 3f       	cpi	r21, 0xFF	; 255
    1774:	71 f0       	breq	.+28     	; 0x1792 <__fp_splitA+0x1a>
    1776:	47 95       	ror	r20

00001778 <__fp_splitA>:
    1778:	88 0f       	add	r24, r24
    177a:	97 fb       	bst	r25, 7
    177c:	99 1f       	adc	r25, r25
    177e:	61 f0       	breq	.+24     	; 0x1798 <__fp_splitA+0x20>
    1780:	9f 3f       	cpi	r25, 0xFF	; 255
    1782:	79 f0       	breq	.+30     	; 0x17a2 <__fp_splitA+0x2a>
    1784:	87 95       	ror	r24
    1786:	08 95       	ret
    1788:	12 16       	cp	r1, r18
    178a:	13 06       	cpc	r1, r19
    178c:	14 06       	cpc	r1, r20
    178e:	55 1f       	adc	r21, r21
    1790:	f2 cf       	rjmp	.-28     	; 0x1776 <__fp_split3+0xe>
    1792:	46 95       	lsr	r20
    1794:	f1 df       	rcall	.-30     	; 0x1778 <__fp_splitA>
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <__fp_splitA+0x30>
    1798:	16 16       	cp	r1, r22
    179a:	17 06       	cpc	r1, r23
    179c:	18 06       	cpc	r1, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	f1 cf       	rjmp	.-30     	; 0x1784 <__fp_splitA+0xc>
    17a2:	86 95       	lsr	r24
    17a4:	71 05       	cpc	r23, r1
    17a6:	61 05       	cpc	r22, r1
    17a8:	08 94       	sec
    17aa:	08 95       	ret

000017ac <__fp_zero>:
    17ac:	e8 94       	clt

000017ae <__fp_szero>:
    17ae:	bb 27       	eor	r27, r27
    17b0:	66 27       	eor	r22, r22
    17b2:	77 27       	eor	r23, r23
    17b4:	cb 01       	movw	r24, r22
    17b6:	97 f9       	bld	r25, 7
    17b8:	08 95       	ret

000017ba <__gesf2>:
    17ba:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fp_cmp>
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <__gesf2+0x8>
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	08 95       	ret

000017c4 <__mulsf3>:
    17c4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__mulsf3x>
    17c8:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__fp_round>
    17cc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__fp_pscA>
    17d0:	38 f0       	brcs	.+14     	; 0x17e0 <__mulsf3+0x1c>
    17d2:	0e 94 5f 0c 	call	0x18be	; 0x18be <__fp_pscB>
    17d6:	20 f0       	brcs	.+8      	; 0x17e0 <__mulsf3+0x1c>
    17d8:	95 23       	and	r25, r21
    17da:	11 f0       	breq	.+4      	; 0x17e0 <__mulsf3+0x1c>
    17dc:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_inf>
    17e0:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__fp_nan>
    17e4:	11 24       	eor	r1, r1
    17e6:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_szero>

000017ea <__mulsf3x>:
    17ea:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__fp_split3>
    17ee:	70 f3       	brcs	.-36     	; 0x17cc <__mulsf3+0x8>

000017f0 <__mulsf3_pse>:
    17f0:	95 9f       	mul	r25, r21
    17f2:	c1 f3       	breq	.-16     	; 0x17e4 <__mulsf3+0x20>
    17f4:	95 0f       	add	r25, r21
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	55 1f       	adc	r21, r21
    17fa:	62 9f       	mul	r22, r18
    17fc:	f0 01       	movw	r30, r0
    17fe:	72 9f       	mul	r23, r18
    1800:	bb 27       	eor	r27, r27
    1802:	f0 0d       	add	r31, r0
    1804:	b1 1d       	adc	r27, r1
    1806:	63 9f       	mul	r22, r19
    1808:	aa 27       	eor	r26, r26
    180a:	f0 0d       	add	r31, r0
    180c:	b1 1d       	adc	r27, r1
    180e:	aa 1f       	adc	r26, r26
    1810:	64 9f       	mul	r22, r20
    1812:	66 27       	eor	r22, r22
    1814:	b0 0d       	add	r27, r0
    1816:	a1 1d       	adc	r26, r1
    1818:	66 1f       	adc	r22, r22
    181a:	82 9f       	mul	r24, r18
    181c:	22 27       	eor	r18, r18
    181e:	b0 0d       	add	r27, r0
    1820:	a1 1d       	adc	r26, r1
    1822:	62 1f       	adc	r22, r18
    1824:	73 9f       	mul	r23, r19
    1826:	b0 0d       	add	r27, r0
    1828:	a1 1d       	adc	r26, r1
    182a:	62 1f       	adc	r22, r18
    182c:	83 9f       	mul	r24, r19
    182e:	a0 0d       	add	r26, r0
    1830:	61 1d       	adc	r22, r1
    1832:	22 1f       	adc	r18, r18
    1834:	74 9f       	mul	r23, r20
    1836:	33 27       	eor	r19, r19
    1838:	a0 0d       	add	r26, r0
    183a:	61 1d       	adc	r22, r1
    183c:	23 1f       	adc	r18, r19
    183e:	84 9f       	mul	r24, r20
    1840:	60 0d       	add	r22, r0
    1842:	21 1d       	adc	r18, r1
    1844:	82 2f       	mov	r24, r18
    1846:	76 2f       	mov	r23, r22
    1848:	6a 2f       	mov	r22, r26
    184a:	11 24       	eor	r1, r1
    184c:	9f 57       	subi	r25, 0x7F	; 127
    184e:	50 40       	sbci	r21, 0x00	; 0
    1850:	9a f0       	brmi	.+38     	; 0x1878 <__mulsf3_pse+0x88>
    1852:	f1 f0       	breq	.+60     	; 0x1890 <__mulsf3_pse+0xa0>
    1854:	88 23       	and	r24, r24
    1856:	4a f0       	brmi	.+18     	; 0x186a <__mulsf3_pse+0x7a>
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	bb 1f       	adc	r27, r27
    185e:	66 1f       	adc	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	88 1f       	adc	r24, r24
    1864:	91 50       	subi	r25, 0x01	; 1
    1866:	50 40       	sbci	r21, 0x00	; 0
    1868:	a9 f7       	brne	.-22     	; 0x1854 <__mulsf3_pse+0x64>
    186a:	9e 3f       	cpi	r25, 0xFE	; 254
    186c:	51 05       	cpc	r21, r1
    186e:	80 f0       	brcs	.+32     	; 0x1890 <__mulsf3_pse+0xa0>
    1870:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__fp_inf>
    1874:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__fp_szero>
    1878:	5f 3f       	cpi	r21, 0xFF	; 255
    187a:	e4 f3       	brlt	.-8      	; 0x1874 <__mulsf3_pse+0x84>
    187c:	98 3e       	cpi	r25, 0xE8	; 232
    187e:	d4 f3       	brlt	.-12     	; 0x1874 <__mulsf3_pse+0x84>
    1880:	86 95       	lsr	r24
    1882:	77 95       	ror	r23
    1884:	67 95       	ror	r22
    1886:	b7 95       	ror	r27
    1888:	f7 95       	ror	r31
    188a:	e7 95       	ror	r30
    188c:	9f 5f       	subi	r25, 0xFF	; 255
    188e:	c1 f7       	brne	.-16     	; 0x1880 <__mulsf3_pse+0x90>
    1890:	fe 2b       	or	r31, r30
    1892:	88 0f       	add	r24, r24
    1894:	91 1d       	adc	r25, r1
    1896:	96 95       	lsr	r25
    1898:	87 95       	ror	r24
    189a:	97 f9       	bld	r25, 7
    189c:	08 95       	ret

0000189e <__fp_inf>:
    189e:	97 f9       	bld	r25, 7
    18a0:	9f 67       	ori	r25, 0x7F	; 127
    18a2:	80 e8       	ldi	r24, 0x80	; 128
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	08 95       	ret

000018aa <__fp_nan>:
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	80 ec       	ldi	r24, 0xC0	; 192
    18ae:	08 95       	ret

000018b0 <__fp_pscA>:
    18b0:	00 24       	eor	r0, r0
    18b2:	0a 94       	dec	r0
    18b4:	16 16       	cp	r1, r22
    18b6:	17 06       	cpc	r1, r23
    18b8:	18 06       	cpc	r1, r24
    18ba:	09 06       	cpc	r0, r25
    18bc:	08 95       	ret

000018be <__fp_pscB>:
    18be:	00 24       	eor	r0, r0
    18c0:	0a 94       	dec	r0
    18c2:	12 16       	cp	r1, r18
    18c4:	13 06       	cpc	r1, r19
    18c6:	14 06       	cpc	r1, r20
    18c8:	05 06       	cpc	r0, r21
    18ca:	08 95       	ret

000018cc <__fp_round>:
    18cc:	09 2e       	mov	r0, r25
    18ce:	03 94       	inc	r0
    18d0:	00 0c       	add	r0, r0
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <__fp_round+0xc>
    18d4:	88 23       	and	r24, r24
    18d6:	52 f0       	brmi	.+20     	; 0x18ec <__fp_round+0x20>
    18d8:	bb 0f       	add	r27, r27
    18da:	40 f4       	brcc	.+16     	; 0x18ec <__fp_round+0x20>
    18dc:	bf 2b       	or	r27, r31
    18de:	11 f4       	brne	.+4      	; 0x18e4 <__fp_round+0x18>
    18e0:	60 ff       	sbrs	r22, 0
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <__fp_round+0x20>
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	08 95       	ret

000018ee <__udivmodqi4>:
    18ee:	99 1b       	sub	r25, r25
    18f0:	79 e0       	ldi	r23, 0x09	; 9
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__udivmodqi4_ep>

000018f4 <__udivmodqi4_loop>:
    18f4:	99 1f       	adc	r25, r25
    18f6:	96 17       	cp	r25, r22
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <__udivmodqi4_ep>
    18fa:	96 1b       	sub	r25, r22

000018fc <__udivmodqi4_ep>:
    18fc:	88 1f       	adc	r24, r24
    18fe:	7a 95       	dec	r23
    1900:	c9 f7       	brne	.-14     	; 0x18f4 <__udivmodqi4_loop>
    1902:	80 95       	com	r24
    1904:	08 95       	ret

00001906 <__udivmodsi4>:
    1906:	a1 e2       	ldi	r26, 0x21	; 33
    1908:	1a 2e       	mov	r1, r26
    190a:	aa 1b       	sub	r26, r26
    190c:	bb 1b       	sub	r27, r27
    190e:	fd 01       	movw	r30, r26
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__udivmodsi4_ep>

00001912 <__udivmodsi4_loop>:
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	ee 1f       	adc	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	a2 17       	cp	r26, r18
    191c:	b3 07       	cpc	r27, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	20 f0       	brcs	.+8      	; 0x192c <__udivmodsi4_ep>
    1924:	a2 1b       	sub	r26, r18
    1926:	b3 0b       	sbc	r27, r19
    1928:	e4 0b       	sbc	r30, r20
    192a:	f5 0b       	sbc	r31, r21

0000192c <__udivmodsi4_ep>:
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a 94       	dec	r1
    1936:	69 f7       	brne	.-38     	; 0x1912 <__udivmodsi4_loop>
    1938:	60 95       	com	r22
    193a:	70 95       	com	r23
    193c:	80 95       	com	r24
    193e:	90 95       	com	r25
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	bd 01       	movw	r22, r26
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret

0000194a <__divmodsi4>:
    194a:	05 2e       	mov	r0, r21
    194c:	97 fb       	bst	r25, 7
    194e:	1e f4       	brtc	.+6      	; 0x1956 <__divmodsi4+0xc>
    1950:	00 94       	com	r0
    1952:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__negsi2>
    1956:	57 fd       	sbrc	r21, 7
    1958:	07 d0       	rcall	.+14     	; 0x1968 <__divmodsi4_neg2>
    195a:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
    195e:	07 fc       	sbrc	r0, 7
    1960:	03 d0       	rcall	.+6      	; 0x1968 <__divmodsi4_neg2>
    1962:	4e f4       	brtc	.+18     	; 0x1976 <__divmodsi4_exit>
    1964:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__negsi2>

00001968 <__divmodsi4_neg2>:
    1968:	50 95       	com	r21
    196a:	40 95       	com	r20
    196c:	30 95       	com	r19
    196e:	21 95       	neg	r18
    1970:	3f 4f       	sbci	r19, 0xFF	; 255
    1972:	4f 4f       	sbci	r20, 0xFF	; 255
    1974:	5f 4f       	sbci	r21, 0xFF	; 255

00001976 <__divmodsi4_exit>:
    1976:	08 95       	ret

00001978 <__negsi2>:
    1978:	90 95       	com	r25
    197a:	80 95       	com	r24
    197c:	70 95       	com	r23
    197e:	61 95       	neg	r22
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	08 95       	ret

00001988 <sprintf>:
    1988:	ae e0       	ldi	r26, 0x0E	; 14
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ea ec       	ldi	r30, 0xCA	; 202
    198e:	fc e0       	ldi	r31, 0x0C	; 12
    1990:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__prologue_saves__+0x1c>
    1994:	0d 89       	ldd	r16, Y+21	; 0x15
    1996:	1e 89       	ldd	r17, Y+22	; 0x16
    1998:	86 e0       	ldi	r24, 0x06	; 6
    199a:	8c 83       	std	Y+4, r24	; 0x04
    199c:	1a 83       	std	Y+2, r17	; 0x02
    199e:	09 83       	std	Y+1, r16	; 0x01
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9f e7       	ldi	r25, 0x7F	; 127
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	ae 01       	movw	r20, r28
    19aa:	47 5e       	subi	r20, 0xE7	; 231
    19ac:	5f 4f       	sbci	r21, 0xFF	; 255
    19ae:	6f 89       	ldd	r22, Y+23	; 0x17
    19b0:	78 8d       	ldd	r23, Y+24	; 0x18
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <vfprintf>
    19ba:	ef 81       	ldd	r30, Y+7	; 0x07
    19bc:	f8 85       	ldd	r31, Y+8	; 0x08
    19be:	e0 0f       	add	r30, r16
    19c0:	f1 1f       	adc	r31, r17
    19c2:	10 82       	st	Z, r1
    19c4:	2e 96       	adiw	r28, 0x0e	; 14
    19c6:	e4 e0       	ldi	r30, 0x04	; 4
    19c8:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__epilogue_restores__+0x1c>

000019cc <vfprintf>:
    19cc:	ab e0       	ldi	r26, 0x0B	; 11
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ec ee       	ldi	r30, 0xEC	; 236
    19d2:	fc e0       	ldi	r31, 0x0C	; 12
    19d4:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__prologue_saves__>
    19d8:	6c 01       	movw	r12, r24
    19da:	7b 01       	movw	r14, r22
    19dc:	8a 01       	movw	r16, r20
    19de:	fc 01       	movw	r30, r24
    19e0:	17 82       	std	Z+7, r1	; 0x07
    19e2:	16 82       	std	Z+6, r1	; 0x06
    19e4:	83 81       	ldd	r24, Z+3	; 0x03
    19e6:	81 ff       	sbrs	r24, 1
    19e8:	cc c1       	rjmp	.+920    	; 0x1d82 <vfprintf+0x3b6>
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	3c 01       	movw	r6, r24
    19f0:	f6 01       	movw	r30, r12
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	f7 01       	movw	r30, r14
    19f6:	93 fd       	sbrc	r25, 3
    19f8:	85 91       	lpm	r24, Z+
    19fa:	93 ff       	sbrs	r25, 3
    19fc:	81 91       	ld	r24, Z+
    19fe:	7f 01       	movw	r14, r30
    1a00:	88 23       	and	r24, r24
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <vfprintf+0x3a>
    1a04:	ba c1       	rjmp	.+884    	; 0x1d7a <vfprintf+0x3ae>
    1a06:	85 32       	cpi	r24, 0x25	; 37
    1a08:	39 f4       	brne	.+14     	; 0x1a18 <vfprintf+0x4c>
    1a0a:	93 fd       	sbrc	r25, 3
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	93 ff       	sbrs	r25, 3
    1a10:	81 91       	ld	r24, Z+
    1a12:	7f 01       	movw	r14, r30
    1a14:	85 32       	cpi	r24, 0x25	; 37
    1a16:	29 f4       	brne	.+10     	; 0x1a22 <vfprintf+0x56>
    1a18:	b6 01       	movw	r22, r12
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1a20:	e7 cf       	rjmp	.-50     	; 0x19f0 <vfprintf+0x24>
    1a22:	91 2c       	mov	r9, r1
    1a24:	21 2c       	mov	r2, r1
    1a26:	31 2c       	mov	r3, r1
    1a28:	ff e1       	ldi	r31, 0x1F	; 31
    1a2a:	f3 15       	cp	r31, r3
    1a2c:	d8 f0       	brcs	.+54     	; 0x1a64 <vfprintf+0x98>
    1a2e:	8b 32       	cpi	r24, 0x2B	; 43
    1a30:	79 f0       	breq	.+30     	; 0x1a50 <vfprintf+0x84>
    1a32:	38 f4       	brcc	.+14     	; 0x1a42 <vfprintf+0x76>
    1a34:	80 32       	cpi	r24, 0x20	; 32
    1a36:	79 f0       	breq	.+30     	; 0x1a56 <vfprintf+0x8a>
    1a38:	83 32       	cpi	r24, 0x23	; 35
    1a3a:	a1 f4       	brne	.+40     	; 0x1a64 <vfprintf+0x98>
    1a3c:	23 2d       	mov	r18, r3
    1a3e:	20 61       	ori	r18, 0x10	; 16
    1a40:	1d c0       	rjmp	.+58     	; 0x1a7c <vfprintf+0xb0>
    1a42:	8d 32       	cpi	r24, 0x2D	; 45
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <vfprintf+0x92>
    1a46:	80 33       	cpi	r24, 0x30	; 48
    1a48:	69 f4       	brne	.+26     	; 0x1a64 <vfprintf+0x98>
    1a4a:	23 2d       	mov	r18, r3
    1a4c:	21 60       	ori	r18, 0x01	; 1
    1a4e:	16 c0       	rjmp	.+44     	; 0x1a7c <vfprintf+0xb0>
    1a50:	83 2d       	mov	r24, r3
    1a52:	82 60       	ori	r24, 0x02	; 2
    1a54:	38 2e       	mov	r3, r24
    1a56:	e3 2d       	mov	r30, r3
    1a58:	e4 60       	ori	r30, 0x04	; 4
    1a5a:	3e 2e       	mov	r3, r30
    1a5c:	2a c0       	rjmp	.+84     	; 0x1ab2 <vfprintf+0xe6>
    1a5e:	f3 2d       	mov	r31, r3
    1a60:	f8 60       	ori	r31, 0x08	; 8
    1a62:	1d c0       	rjmp	.+58     	; 0x1a9e <vfprintf+0xd2>
    1a64:	37 fc       	sbrc	r3, 7
    1a66:	2d c0       	rjmp	.+90     	; 0x1ac2 <vfprintf+0xf6>
    1a68:	20 ed       	ldi	r18, 0xD0	; 208
    1a6a:	28 0f       	add	r18, r24
    1a6c:	2a 30       	cpi	r18, 0x0A	; 10
    1a6e:	40 f0       	brcs	.+16     	; 0x1a80 <vfprintf+0xb4>
    1a70:	8e 32       	cpi	r24, 0x2E	; 46
    1a72:	b9 f4       	brne	.+46     	; 0x1aa2 <vfprintf+0xd6>
    1a74:	36 fc       	sbrc	r3, 6
    1a76:	81 c1       	rjmp	.+770    	; 0x1d7a <vfprintf+0x3ae>
    1a78:	23 2d       	mov	r18, r3
    1a7a:	20 64       	ori	r18, 0x40	; 64
    1a7c:	32 2e       	mov	r3, r18
    1a7e:	19 c0       	rjmp	.+50     	; 0x1ab2 <vfprintf+0xe6>
    1a80:	36 fe       	sbrs	r3, 6
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <vfprintf+0xc4>
    1a84:	8a e0       	ldi	r24, 0x0A	; 10
    1a86:	98 9e       	mul	r9, r24
    1a88:	20 0d       	add	r18, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	92 2e       	mov	r9, r18
    1a8e:	11 c0       	rjmp	.+34     	; 0x1ab2 <vfprintf+0xe6>
    1a90:	ea e0       	ldi	r30, 0x0A	; 10
    1a92:	2e 9e       	mul	r2, r30
    1a94:	20 0d       	add	r18, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	22 2e       	mov	r2, r18
    1a9a:	f3 2d       	mov	r31, r3
    1a9c:	f0 62       	ori	r31, 0x20	; 32
    1a9e:	3f 2e       	mov	r3, r31
    1aa0:	08 c0       	rjmp	.+16     	; 0x1ab2 <vfprintf+0xe6>
    1aa2:	8c 36       	cpi	r24, 0x6C	; 108
    1aa4:	21 f4       	brne	.+8      	; 0x1aae <vfprintf+0xe2>
    1aa6:	83 2d       	mov	r24, r3
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	38 2e       	mov	r3, r24
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <vfprintf+0xe6>
    1aae:	88 36       	cpi	r24, 0x68	; 104
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <vfprintf+0xf6>
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	93 fd       	sbrc	r25, 3
    1ab6:	85 91       	lpm	r24, Z+
    1ab8:	93 ff       	sbrs	r25, 3
    1aba:	81 91       	ld	r24, Z+
    1abc:	7f 01       	movw	r14, r30
    1abe:	81 11       	cpse	r24, r1
    1ac0:	b3 cf       	rjmp	.-154    	; 0x1a28 <vfprintf+0x5c>
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	9f 7d       	andi	r25, 0xDF	; 223
    1ac6:	95 54       	subi	r25, 0x45	; 69
    1ac8:	93 30       	cpi	r25, 0x03	; 3
    1aca:	28 f4       	brcc	.+10     	; 0x1ad6 <vfprintf+0x10a>
    1acc:	0c 5f       	subi	r16, 0xFC	; 252
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	9f e3       	ldi	r25, 0x3F	; 63
    1ad2:	99 83       	std	Y+1, r25	; 0x01
    1ad4:	0d c0       	rjmp	.+26     	; 0x1af0 <vfprintf+0x124>
    1ad6:	83 36       	cpi	r24, 0x63	; 99
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <vfprintf+0x11a>
    1ada:	83 37       	cpi	r24, 0x73	; 115
    1adc:	71 f0       	breq	.+28     	; 0x1afa <vfprintf+0x12e>
    1ade:	83 35       	cpi	r24, 0x53	; 83
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <vfprintf+0x118>
    1ae2:	59 c0       	rjmp	.+178    	; 0x1b96 <vfprintf+0x1ca>
    1ae4:	21 c0       	rjmp	.+66     	; 0x1b28 <vfprintf+0x15c>
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	0e 5f       	subi	r16, 0xFE	; 254
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	88 24       	eor	r8, r8
    1af2:	83 94       	inc	r8
    1af4:	91 2c       	mov	r9, r1
    1af6:	53 01       	movw	r10, r6
    1af8:	13 c0       	rjmp	.+38     	; 0x1b20 <vfprintf+0x154>
    1afa:	28 01       	movw	r4, r16
    1afc:	f2 e0       	ldi	r31, 0x02	; 2
    1afe:	4f 0e       	add	r4, r31
    1b00:	51 1c       	adc	r5, r1
    1b02:	f8 01       	movw	r30, r16
    1b04:	a0 80       	ld	r10, Z
    1b06:	b1 80       	ldd	r11, Z+1	; 0x01
    1b08:	36 fe       	sbrs	r3, 6
    1b0a:	03 c0       	rjmp	.+6      	; 0x1b12 <vfprintf+0x146>
    1b0c:	69 2d       	mov	r22, r9
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <vfprintf+0x14a>
    1b12:	6f ef       	ldi	r22, 0xFF	; 255
    1b14:	7f ef       	ldi	r23, 0xFF	; 255
    1b16:	c5 01       	movw	r24, r10
    1b18:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <strnlen>
    1b1c:	4c 01       	movw	r8, r24
    1b1e:	82 01       	movw	r16, r4
    1b20:	f3 2d       	mov	r31, r3
    1b22:	ff 77       	andi	r31, 0x7F	; 127
    1b24:	3f 2e       	mov	r3, r31
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <vfprintf+0x188>
    1b28:	28 01       	movw	r4, r16
    1b2a:	22 e0       	ldi	r18, 0x02	; 2
    1b2c:	42 0e       	add	r4, r18
    1b2e:	51 1c       	adc	r5, r1
    1b30:	f8 01       	movw	r30, r16
    1b32:	a0 80       	ld	r10, Z
    1b34:	b1 80       	ldd	r11, Z+1	; 0x01
    1b36:	36 fe       	sbrs	r3, 6
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <vfprintf+0x174>
    1b3a:	69 2d       	mov	r22, r9
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <vfprintf+0x178>
    1b40:	6f ef       	ldi	r22, 0xFF	; 255
    1b42:	7f ef       	ldi	r23, 0xFF	; 255
    1b44:	c5 01       	movw	r24, r10
    1b46:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <strnlen_P>
    1b4a:	4c 01       	movw	r8, r24
    1b4c:	f3 2d       	mov	r31, r3
    1b4e:	f0 68       	ori	r31, 0x80	; 128
    1b50:	3f 2e       	mov	r3, r31
    1b52:	82 01       	movw	r16, r4
    1b54:	33 fc       	sbrc	r3, 3
    1b56:	1b c0       	rjmp	.+54     	; 0x1b8e <vfprintf+0x1c2>
    1b58:	82 2d       	mov	r24, r2
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	88 16       	cp	r8, r24
    1b5e:	99 06       	cpc	r9, r25
    1b60:	b0 f4       	brcc	.+44     	; 0x1b8e <vfprintf+0x1c2>
    1b62:	b6 01       	movw	r22, r12
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b6c:	2a 94       	dec	r2
    1b6e:	f4 cf       	rjmp	.-24     	; 0x1b58 <vfprintf+0x18c>
    1b70:	f5 01       	movw	r30, r10
    1b72:	37 fc       	sbrc	r3, 7
    1b74:	85 91       	lpm	r24, Z+
    1b76:	37 fe       	sbrs	r3, 7
    1b78:	81 91       	ld	r24, Z+
    1b7a:	5f 01       	movw	r10, r30
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1b84:	21 10       	cpse	r2, r1
    1b86:	2a 94       	dec	r2
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	82 1a       	sub	r8, r18
    1b8c:	91 08       	sbc	r9, r1
    1b8e:	81 14       	cp	r8, r1
    1b90:	91 04       	cpc	r9, r1
    1b92:	71 f7       	brne	.-36     	; 0x1b70 <vfprintf+0x1a4>
    1b94:	e8 c0       	rjmp	.+464    	; 0x1d66 <vfprintf+0x39a>
    1b96:	84 36       	cpi	r24, 0x64	; 100
    1b98:	11 f0       	breq	.+4      	; 0x1b9e <vfprintf+0x1d2>
    1b9a:	89 36       	cpi	r24, 0x69	; 105
    1b9c:	41 f5       	brne	.+80     	; 0x1bee <vfprintf+0x222>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	37 fe       	sbrs	r3, 7
    1ba2:	07 c0       	rjmp	.+14     	; 0x1bb2 <vfprintf+0x1e6>
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	0c 5f       	subi	r16, 0xFC	; 252
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <vfprintf+0x1f6>
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	07 2e       	mov	r0, r23
    1bb8:	00 0c       	add	r0, r0
    1bba:	88 0b       	sbc	r24, r24
    1bbc:	99 0b       	sbc	r25, r25
    1bbe:	0e 5f       	subi	r16, 0xFE	; 254
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	f3 2d       	mov	r31, r3
    1bc4:	ff 76       	andi	r31, 0x6F	; 111
    1bc6:	3f 2e       	mov	r3, r31
    1bc8:	97 ff       	sbrs	r25, 7
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <vfprintf+0x212>
    1bcc:	90 95       	com	r25
    1bce:	80 95       	com	r24
    1bd0:	70 95       	com	r23
    1bd2:	61 95       	neg	r22
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	f0 68       	ori	r31, 0x80	; 128
    1bdc:	3f 2e       	mov	r3, r31
    1bde:	2a e0       	ldi	r18, 0x0A	; 10
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	a3 01       	movw	r20, r6
    1be4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1be8:	88 2e       	mov	r8, r24
    1bea:	86 18       	sub	r8, r6
    1bec:	45 c0       	rjmp	.+138    	; 0x1c78 <vfprintf+0x2ac>
    1bee:	85 37       	cpi	r24, 0x75	; 117
    1bf0:	31 f4       	brne	.+12     	; 0x1bfe <vfprintf+0x232>
    1bf2:	23 2d       	mov	r18, r3
    1bf4:	2f 7e       	andi	r18, 0xEF	; 239
    1bf6:	b2 2e       	mov	r11, r18
    1bf8:	2a e0       	ldi	r18, 0x0A	; 10
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	25 c0       	rjmp	.+74     	; 0x1c48 <vfprintf+0x27c>
    1bfe:	93 2d       	mov	r25, r3
    1c00:	99 7f       	andi	r25, 0xF9	; 249
    1c02:	b9 2e       	mov	r11, r25
    1c04:	8f 36       	cpi	r24, 0x6F	; 111
    1c06:	c1 f0       	breq	.+48     	; 0x1c38 <vfprintf+0x26c>
    1c08:	18 f4       	brcc	.+6      	; 0x1c10 <vfprintf+0x244>
    1c0a:	88 35       	cpi	r24, 0x58	; 88
    1c0c:	79 f0       	breq	.+30     	; 0x1c2c <vfprintf+0x260>
    1c0e:	b5 c0       	rjmp	.+362    	; 0x1d7a <vfprintf+0x3ae>
    1c10:	80 37       	cpi	r24, 0x70	; 112
    1c12:	19 f0       	breq	.+6      	; 0x1c1a <vfprintf+0x24e>
    1c14:	88 37       	cpi	r24, 0x78	; 120
    1c16:	21 f0       	breq	.+8      	; 0x1c20 <vfprintf+0x254>
    1c18:	b0 c0       	rjmp	.+352    	; 0x1d7a <vfprintf+0x3ae>
    1c1a:	e9 2f       	mov	r30, r25
    1c1c:	e0 61       	ori	r30, 0x10	; 16
    1c1e:	be 2e       	mov	r11, r30
    1c20:	b4 fe       	sbrs	r11, 4
    1c22:	0d c0       	rjmp	.+26     	; 0x1c3e <vfprintf+0x272>
    1c24:	fb 2d       	mov	r31, r11
    1c26:	f4 60       	ori	r31, 0x04	; 4
    1c28:	bf 2e       	mov	r11, r31
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <vfprintf+0x272>
    1c2c:	34 fe       	sbrs	r3, 4
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <vfprintf+0x278>
    1c30:	29 2f       	mov	r18, r25
    1c32:	26 60       	ori	r18, 0x06	; 6
    1c34:	b2 2e       	mov	r11, r18
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0x278>
    1c38:	28 e0       	ldi	r18, 0x08	; 8
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	05 c0       	rjmp	.+10     	; 0x1c48 <vfprintf+0x27c>
    1c3e:	20 e1       	ldi	r18, 0x10	; 16
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0x27c>
    1c44:	20 e1       	ldi	r18, 0x10	; 16
    1c46:	32 e0       	ldi	r19, 0x02	; 2
    1c48:	f8 01       	movw	r30, r16
    1c4a:	b7 fe       	sbrs	r11, 7
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <vfprintf+0x290>
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <vfprintf+0x29c>
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 5f       	subi	r16, 0xFE	; 254
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	a3 01       	movw	r20, r6
    1c6a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__ultoa_invert>
    1c6e:	88 2e       	mov	r8, r24
    1c70:	86 18       	sub	r8, r6
    1c72:	fb 2d       	mov	r31, r11
    1c74:	ff 77       	andi	r31, 0x7F	; 127
    1c76:	3f 2e       	mov	r3, r31
    1c78:	36 fe       	sbrs	r3, 6
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <vfprintf+0x2ca>
    1c7c:	23 2d       	mov	r18, r3
    1c7e:	2e 7f       	andi	r18, 0xFE	; 254
    1c80:	a2 2e       	mov	r10, r18
    1c82:	89 14       	cp	r8, r9
    1c84:	58 f4       	brcc	.+22     	; 0x1c9c <vfprintf+0x2d0>
    1c86:	34 fe       	sbrs	r3, 4
    1c88:	0b c0       	rjmp	.+22     	; 0x1ca0 <vfprintf+0x2d4>
    1c8a:	32 fc       	sbrc	r3, 2
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <vfprintf+0x2d4>
    1c8e:	83 2d       	mov	r24, r3
    1c90:	8e 7e       	andi	r24, 0xEE	; 238
    1c92:	a8 2e       	mov	r10, r24
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <vfprintf+0x2d4>
    1c96:	b8 2c       	mov	r11, r8
    1c98:	a3 2c       	mov	r10, r3
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <vfprintf+0x2d6>
    1c9c:	b8 2c       	mov	r11, r8
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <vfprintf+0x2d6>
    1ca0:	b9 2c       	mov	r11, r9
    1ca2:	a4 fe       	sbrs	r10, 4
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <vfprintf+0x2f8>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e8 0d       	add	r30, r8
    1caa:	f1 1d       	adc	r31, r1
    1cac:	80 81       	ld	r24, Z
    1cae:	80 33       	cpi	r24, 0x30	; 48
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <vfprintf+0x2ee>
    1cb2:	9a 2d       	mov	r25, r10
    1cb4:	99 7e       	andi	r25, 0xE9	; 233
    1cb6:	a9 2e       	mov	r10, r25
    1cb8:	09 c0       	rjmp	.+18     	; 0x1ccc <vfprintf+0x300>
    1cba:	a2 fe       	sbrs	r10, 2
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <vfprintf+0x2fe>
    1cbe:	b3 94       	inc	r11
    1cc0:	b3 94       	inc	r11
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <vfprintf+0x300>
    1cc4:	8a 2d       	mov	r24, r10
    1cc6:	86 78       	andi	r24, 0x86	; 134
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <vfprintf+0x300>
    1cca:	b3 94       	inc	r11
    1ccc:	a3 fc       	sbrc	r10, 3
    1cce:	11 c0       	rjmp	.+34     	; 0x1cf2 <vfprintf+0x326>
    1cd0:	a0 fe       	sbrs	r10, 0
    1cd2:	06 c0       	rjmp	.+12     	; 0x1ce0 <vfprintf+0x314>
    1cd4:	b2 14       	cp	r11, r2
    1cd6:	88 f4       	brcc	.+34     	; 0x1cfa <vfprintf+0x32e>
    1cd8:	28 0c       	add	r2, r8
    1cda:	92 2c       	mov	r9, r2
    1cdc:	9b 18       	sub	r9, r11
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <vfprintf+0x330>
    1ce0:	b2 14       	cp	r11, r2
    1ce2:	60 f4       	brcc	.+24     	; 0x1cfc <vfprintf+0x330>
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1cee:	b3 94       	inc	r11
    1cf0:	f7 cf       	rjmp	.-18     	; 0x1ce0 <vfprintf+0x314>
    1cf2:	b2 14       	cp	r11, r2
    1cf4:	18 f4       	brcc	.+6      	; 0x1cfc <vfprintf+0x330>
    1cf6:	2b 18       	sub	r2, r11
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x332>
    1cfa:	98 2c       	mov	r9, r8
    1cfc:	21 2c       	mov	r2, r1
    1cfe:	a4 fe       	sbrs	r10, 4
    1d00:	10 c0       	rjmp	.+32     	; 0x1d22 <vfprintf+0x356>
    1d02:	b6 01       	movw	r22, r12
    1d04:	80 e3       	ldi	r24, 0x30	; 48
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d0c:	a2 fe       	sbrs	r10, 2
    1d0e:	17 c0       	rjmp	.+46     	; 0x1d3e <vfprintf+0x372>
    1d10:	a1 fc       	sbrc	r10, 1
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <vfprintf+0x34e>
    1d14:	88 e7       	ldi	r24, 0x78	; 120
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x352>
    1d1a:	88 e5       	ldi	r24, 0x58	; 88
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	b6 01       	movw	r22, r12
    1d20:	0c c0       	rjmp	.+24     	; 0x1d3a <vfprintf+0x36e>
    1d22:	8a 2d       	mov	r24, r10
    1d24:	86 78       	andi	r24, 0x86	; 134
    1d26:	59 f0       	breq	.+22     	; 0x1d3e <vfprintf+0x372>
    1d28:	a1 fe       	sbrs	r10, 1
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x364>
    1d2c:	8b e2       	ldi	r24, 0x2B	; 43
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <vfprintf+0x366>
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	a7 fc       	sbrc	r10, 7
    1d34:	8d e2       	ldi	r24, 0x2D	; 45
    1d36:	b6 01       	movw	r22, r12
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d3e:	89 14       	cp	r8, r9
    1d40:	38 f4       	brcc	.+14     	; 0x1d50 <vfprintf+0x384>
    1d42:	b6 01       	movw	r22, r12
    1d44:	80 e3       	ldi	r24, 0x30	; 48
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d4c:	9a 94       	dec	r9
    1d4e:	f7 cf       	rjmp	.-18     	; 0x1d3e <vfprintf+0x372>
    1d50:	8a 94       	dec	r8
    1d52:	f3 01       	movw	r30, r6
    1d54:	e8 0d       	add	r30, r8
    1d56:	f1 1d       	adc	r31, r1
    1d58:	80 81       	ld	r24, Z
    1d5a:	b6 01       	movw	r22, r12
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d62:	81 10       	cpse	r8, r1
    1d64:	f5 cf       	rjmp	.-22     	; 0x1d50 <vfprintf+0x384>
    1d66:	22 20       	and	r2, r2
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <vfprintf+0x3a0>
    1d6a:	42 ce       	rjmp	.-892    	; 0x19f0 <vfprintf+0x24>
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <fputc>
    1d76:	2a 94       	dec	r2
    1d78:	f6 cf       	rjmp	.-20     	; 0x1d66 <vfprintf+0x39a>
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	86 81       	ldd	r24, Z+6	; 0x06
    1d7e:	97 81       	ldd	r25, Z+7	; 0x07
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <vfprintf+0x3ba>
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	9f ef       	ldi	r25, 0xFF	; 255
    1d86:	2b 96       	adiw	r28, 0x0b	; 11
    1d88:	e2 e1       	ldi	r30, 0x12	; 18
    1d8a:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__epilogue_restores__>

00001d8e <strnlen_P>:
    1d8e:	fc 01       	movw	r30, r24
    1d90:	05 90       	lpm	r0, Z+
    1d92:	61 50       	subi	r22, 0x01	; 1
    1d94:	70 40       	sbci	r23, 0x00	; 0
    1d96:	01 10       	cpse	r0, r1
    1d98:	d8 f7       	brcc	.-10     	; 0x1d90 <strnlen_P+0x2>
    1d9a:	80 95       	com	r24
    1d9c:	90 95       	com	r25
    1d9e:	8e 0f       	add	r24, r30
    1da0:	9f 1f       	adc	r25, r31
    1da2:	08 95       	ret

00001da4 <strnlen>:
    1da4:	fc 01       	movw	r30, r24
    1da6:	61 50       	subi	r22, 0x01	; 1
    1da8:	70 40       	sbci	r23, 0x00	; 0
    1daa:	01 90       	ld	r0, Z+
    1dac:	01 10       	cpse	r0, r1
    1dae:	d8 f7       	brcc	.-10     	; 0x1da6 <strnlen+0x2>
    1db0:	80 95       	com	r24
    1db2:	90 95       	com	r25
    1db4:	8e 0f       	add	r24, r30
    1db6:	9f 1f       	adc	r25, r31
    1db8:	08 95       	ret

00001dba <fputc>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	23 81       	ldd	r18, Z+3	; 0x03
    1dc6:	21 fd       	sbrc	r18, 1
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <fputc+0x16>
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	2c c0       	rjmp	.+88     	; 0x1e28 <fputc+0x6e>
    1dd0:	22 ff       	sbrs	r18, 2
    1dd2:	16 c0       	rjmp	.+44     	; 0x1e00 <fputc+0x46>
    1dd4:	46 81       	ldd	r20, Z+6	; 0x06
    1dd6:	57 81       	ldd	r21, Z+7	; 0x07
    1dd8:	24 81       	ldd	r18, Z+4	; 0x04
    1dda:	35 81       	ldd	r19, Z+5	; 0x05
    1ddc:	42 17       	cp	r20, r18
    1dde:	53 07       	cpc	r21, r19
    1de0:	44 f4       	brge	.+16     	; 0x1df2 <fputc+0x38>
    1de2:	a0 81       	ld	r26, Z
    1de4:	b1 81       	ldd	r27, Z+1	; 0x01
    1de6:	9d 01       	movw	r18, r26
    1de8:	2f 5f       	subi	r18, 0xFF	; 255
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	31 83       	std	Z+1, r19	; 0x01
    1dee:	20 83       	st	Z, r18
    1df0:	8c 93       	st	X, r24
    1df2:	26 81       	ldd	r18, Z+6	; 0x06
    1df4:	37 81       	ldd	r19, Z+7	; 0x07
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	37 83       	std	Z+7, r19	; 0x07
    1dfc:	26 83       	std	Z+6, r18	; 0x06
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <fputc+0x6e>
    1e00:	8b 01       	movw	r16, r22
    1e02:	ec 01       	movw	r28, r24
    1e04:	fb 01       	movw	r30, r22
    1e06:	00 84       	ldd	r0, Z+8	; 0x08
    1e08:	f1 85       	ldd	r31, Z+9	; 0x09
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	09 95       	icall
    1e0e:	89 2b       	or	r24, r25
    1e10:	e1 f6       	brne	.-72     	; 0x1dca <fputc+0x10>
    1e12:	d8 01       	movw	r26, r16
    1e14:	16 96       	adiw	r26, 0x06	; 6
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	17 97       	sbiw	r26, 0x07	; 7
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	17 96       	adiw	r26, 0x07	; 7
    1e20:	9c 93       	st	X, r25
    1e22:	8e 93       	st	-X, r24
    1e24:	16 97       	sbiw	r26, 0x06	; 6
    1e26:	ce 01       	movw	r24, r28
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <__ultoa_invert>:
    1e32:	fa 01       	movw	r30, r20
    1e34:	aa 27       	eor	r26, r26
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	51 f1       	breq	.+84     	; 0x1e8e <__ultoa_invert+0x5c>
    1e3a:	20 31       	cpi	r18, 0x10	; 16
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <__ultoa_invert+0x6c>
    1e3e:	e8 94       	clt
    1e40:	6f 93       	push	r22
    1e42:	6e 7f       	andi	r22, 0xFE	; 254
    1e44:	6e 5f       	subi	r22, 0xFE	; 254
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	af 4f       	sbci	r26, 0xFF	; 255
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	3e d0       	rcall	.+124    	; 0x1ece <__ultoa_invert+0x9c>
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3c d0       	rcall	.+120    	; 0x1ece <__ultoa_invert+0x9c>
    1e56:	67 0f       	add	r22, r23
    1e58:	78 1f       	adc	r23, r24
    1e5a:	89 1f       	adc	r24, r25
    1e5c:	9a 1f       	adc	r25, r26
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	68 0f       	add	r22, r24
    1e62:	79 1f       	adc	r23, r25
    1e64:	8a 1f       	adc	r24, r26
    1e66:	91 1d       	adc	r25, r1
    1e68:	a1 1d       	adc	r26, r1
    1e6a:	6a 0f       	add	r22, r26
    1e6c:	71 1d       	adc	r23, r1
    1e6e:	81 1d       	adc	r24, r1
    1e70:	91 1d       	adc	r25, r1
    1e72:	a1 1d       	adc	r26, r1
    1e74:	20 d0       	rcall	.+64     	; 0x1eb6 <__ultoa_invert+0x84>
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__ultoa_invert+0x48>
    1e78:	68 94       	set
    1e7a:	3f 91       	pop	r19
    1e7c:	2a e0       	ldi	r18, 0x0A	; 10
    1e7e:	26 9f       	mul	r18, r22
    1e80:	11 24       	eor	r1, r1
    1e82:	30 19       	sub	r19, r0
    1e84:	30 5d       	subi	r19, 0xD0	; 208
    1e86:	31 93       	st	Z+, r19
    1e88:	de f6       	brtc	.-74     	; 0x1e40 <__ultoa_invert+0xe>
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	08 95       	ret
    1e8e:	46 2f       	mov	r20, r22
    1e90:	47 70       	andi	r20, 0x07	; 7
    1e92:	40 5d       	subi	r20, 0xD0	; 208
    1e94:	41 93       	st	Z+, r20
    1e96:	b3 e0       	ldi	r27, 0x03	; 3
    1e98:	0f d0       	rcall	.+30     	; 0x1eb8 <__ultoa_invert+0x86>
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0x5c>
    1e9c:	f6 cf       	rjmp	.-20     	; 0x1e8a <__ultoa_invert+0x58>
    1e9e:	46 2f       	mov	r20, r22
    1ea0:	4f 70       	andi	r20, 0x0F	; 15
    1ea2:	40 5d       	subi	r20, 0xD0	; 208
    1ea4:	4a 33       	cpi	r20, 0x3A	; 58
    1ea6:	18 f0       	brcs	.+6      	; 0x1eae <__ultoa_invert+0x7c>
    1ea8:	49 5d       	subi	r20, 0xD9	; 217
    1eaa:	31 fd       	sbrc	r19, 1
    1eac:	40 52       	subi	r20, 0x20	; 32
    1eae:	41 93       	st	Z+, r20
    1eb0:	02 d0       	rcall	.+4      	; 0x1eb6 <__ultoa_invert+0x84>
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__ultoa_invert+0x6c>
    1eb4:	ea cf       	rjmp	.-44     	; 0x1e8a <__ultoa_invert+0x58>
    1eb6:	b4 e0       	ldi	r27, 0x04	; 4
    1eb8:	a6 95       	lsr	r26
    1eba:	97 95       	ror	r25
    1ebc:	87 95       	ror	r24
    1ebe:	77 95       	ror	r23
    1ec0:	67 95       	ror	r22
    1ec2:	ba 95       	dec	r27
    1ec4:	c9 f7       	brne	.-14     	; 0x1eb8 <__ultoa_invert+0x86>
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	61 05       	cpc	r22, r1
    1eca:	71 05       	cpc	r23, r1
    1ecc:	08 95       	ret
    1ece:	9b 01       	movw	r18, r22
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	0a 2e       	mov	r0, r26
    1ed4:	06 94       	lsr	r0
    1ed6:	57 95       	ror	r21
    1ed8:	47 95       	ror	r20
    1eda:	37 95       	ror	r19
    1edc:	27 95       	ror	r18
    1ede:	ba 95       	dec	r27
    1ee0:	c9 f7       	brne	.-14     	; 0x1ed4 <__ultoa_invert+0xa2>
    1ee2:	62 0f       	add	r22, r18
    1ee4:	73 1f       	adc	r23, r19
    1ee6:	84 1f       	adc	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	a0 1d       	adc	r26, r0
    1eec:	08 95       	ret

00001eee <__prologue_saves__>:
    1eee:	2f 92       	push	r2
    1ef0:	3f 92       	push	r3
    1ef2:	4f 92       	push	r4
    1ef4:	5f 92       	push	r5
    1ef6:	6f 92       	push	r6
    1ef8:	7f 92       	push	r7
    1efa:	8f 92       	push	r8
    1efc:	9f 92       	push	r9
    1efe:	af 92       	push	r10
    1f00:	bf 92       	push	r11
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	ca 1b       	sub	r28, r26
    1f18:	db 0b       	sbc	r29, r27
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	09 94       	ijmp

00001f26 <__epilogue_restores__>:
    1f26:	2a 88       	ldd	r2, Y+18	; 0x12
    1f28:	39 88       	ldd	r3, Y+17	; 0x11
    1f2a:	48 88       	ldd	r4, Y+16	; 0x10
    1f2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f38:	b9 84       	ldd	r11, Y+9	; 0x09
    1f3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f3c:	df 80       	ldd	r13, Y+7	; 0x07
    1f3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f40:	fd 80       	ldd	r15, Y+5	; 0x05
    1f42:	0c 81       	ldd	r16, Y+4	; 0x04
    1f44:	1b 81       	ldd	r17, Y+3	; 0x03
    1f46:	aa 81       	ldd	r26, Y+2	; 0x02
    1f48:	b9 81       	ldd	r27, Y+1	; 0x01
    1f4a:	ce 0f       	add	r28, r30
    1f4c:	d1 1d       	adc	r29, r1
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	ed 01       	movw	r28, r26
    1f5a:	08 95       	ret

00001f5c <_exit>:
    1f5c:	f8 94       	cli

00001f5e <__stop_program>:
    1f5e:	ff cf       	rjmp	.-2      	; 0x1f5e <__stop_program>
